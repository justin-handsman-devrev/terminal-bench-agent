diff --git a/.env.example b/.env.example
deleted file mode 100644
index 768d258..0000000
--- a/.env.example
+++ /dev/null
@@ -1,17 +0,0 @@
-# OpenRouter Configuration
-OPENROUTER_API_KEY=your_openrouter_api_key_here
-OPENROUTER_MODEL=google/gemini-2.0-flash-experimental
-
-# Agent Configuration
-MAX_CONCURRENT_AGENTS=3
-MAX_CONTEXT_LENGTH=100000
-TEMPERATURE=0.1
-
-# Tool Configuration
-MAX_FILE_SIZE_KB=500
-ENABLE_GIT_OPERATIONS=true
-ENABLE_FILE_OPERATIONS=true
-
-# Logging
-LOG_LEVEL=info
-LOG_TO_FILE=false
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index e76f91d..7107d45 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,62 @@
-node_modules
+# Dependencies
+node_modules/
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+
+# Build outputs
+dist/
+build/
+*.tsbuildinfo
+
+# Logs
+logs/
+*.log
+
+# Runtime data
+pids/
+*.pid
+*.seed
+*.pid.lock
+
+# Coverage directory used by tools like istanbul
+coverage/
+*.lcov
+
+# nyc test coverage
+.nyc_output
+
+# Environment variables
 .env
-.devrev-todos.json
-dist
+.env.local
+.env.development.local
+.env.test.local
+.env.production.local
+
+# IDE files
+.vscode/
+.idea/
+*.swp
+*.swo
+*~
+
+# OS generated files
+.DS_Store
+.DS_Store?
+._*
+.Spotlight-V100
+.Trashes
+ehthumbs.db
+Thumbs.db
+
+# Test files
+*.test.js
+*.spec.js
+
+# Temporary files
+tmp/
+temp/
+
+# Package manager files
+package-lock.json
+yarn.lock
diff --git a/README.md b/README.md
index d91f277..725c8d3 100644
--- a/README.md
+++ b/README.md
@@ -1,345 +1,113 @@
-# DevRev Coder Agent 🤖
+# 🤓 Multi-Agent Coding System (TypeScript)
 
-A sophisticated multi-agent AI coding system built with TypeScript that helps developers analyze, understand, and modify codebases using natural language instructions.
+## Overview
 
-## 🌟 Features
+This is a TypeScript port of the Python multi-agent orchestrator system. The system consists of:
 
-- **Multi-Agent Architecture**: Specialized agents for different tasks (Coding, Analysis, Planning)
-- **Intelligent Tool System**: Comprehensive set of tools for file operations, git management, and code analysis
-- **Repository-Aware**: Automatically analyzes and understands your codebase structure
-- **OpenRouter Integration**: Powered by state-of-the-art LLMs (Gemini 2.5 Flash by default)
-- **Beautiful Terminal UI**: Colored output using Chalk with intuitive commands
-- **Interactive & Batch Modes**: Chat interactively or execute single commands
-- **Context-Aware Operations**: Maintains conversation history and repository context
+- **Orchestrator Agent**: Strategic coordinator that manages tasks and delegates to subagents
+- **Explorer Agent**: Read-only investigation and verification specialist  
+- **Coder Agent**: Implementation specialist with write access
+- **Context Store**: Persistent knowledge sharing between agents
+- **Action System**: Comprehensive framework for agent-environment interaction
 
-## 🚀 Quick Start
+## Architecture
 
-### Prerequisites
+The system employs a hierarchical multi-agent architecture where:
+- The **Orchestrator** acts as the task manager and coordinator
+- **Subagents** are specialized workers for specific task types (exploration or coding)
+- Communication happens through structured reports and context sharing
+- A **Context Store** enables knowledge persistence and sharing across agent interactions
 
-- Node.js 18+ 
-- npm or yarn
-- OpenRouter API key ([Get one here](https://openrouter.ai/))
+## Key Features
 
-### Installation
-
-```bash
-# Clone or create the project
-npm install
-
-# Initialize configuration
-npm run dev config --init
-
-# Edit your .env file and add your OpenRouter API key
-# OPENROUTER_API_KEY=your_api_key_here
-```
-
-### Build
+- **Smart Context Sharing**: Agents build and share knowledge artifacts through a persistent context store
+- **Task Management**: Comprehensive tracking of multi-step workflows with failure recovery
+- **Time-Conscious Orchestration**: Efficient delegation with precise task scoping
+- **Action-First Design**: All capabilities expressed as discrete, validated actions
+- **Forced Completion**: Ensures task termination with fallback mechanisms
 
-```bash
-# Build the project
-npm run build
+## Getting Started
 
-# Make globally available (optional)
-npm link
-```
-
-## 📖 Usage
-
-### Interactive Mode
-
-Start a chat session with the AI agents:
+### Installation
 
 ```bash
-# Basic interactive mode
-devrev-coder chat
-
-# Specify repository path
-devrev-coder chat -r /path/to/your/project
-
-# Use multi-agent mode for complex tasks
-devrev-coder chat -m
-
-# Specify a particular agent
-devrev-coder chat -a CodingAgent
+npm install
 ```
 
-### One-Shot Execution
-
-Execute single commands:
+### Development
 
 ```bash
-# Analyze a file
-devrev-coder exec "Analyze the main.ts file and suggest improvements"
-
-# Create a new feature
-devrev-coder exec "Create a user authentication system with JWT tokens"
-
-# Refactor code
-devrev-coder exec "Refactor the UserService class to use dependency injection"
+npm run dev
 ```
 
-### Repository Analysis
-
-Get insights about your codebase:
+### Build
 
 ```bash
-# Analyze current directory
-devrev-coder analyze
-
-# Analyze specific path
-devrev-coder analyze /path/to/project
-
-# Output as JSON
-devrev-coder analyze -o json
+npm run build
 ```
 
-### Agent Management
+### Testing
 
 ```bash
-# List available agents
-devrev-coder agents
-
-# List available tools
-devrev-coder tools
-
-# Show tools by category
-devrev-coder tools -c file
+npm test
 ```
 
-## 🤖 Available Agents
-
-### CodingAgent
-Specialized in writing, modifying, and fixing code.
-
-**Capabilities:**
-- Write new code files
-- Modify existing code
-- Fix bugs and issues
-- Add tests and documentation
-- Implement new features
-- Apply coding best practices
-
-### AnalysisAgent
-Focused on understanding and analyzing codebases.
-
-**Capabilities:**
-- Analyze repository structure
-- Identify code patterns and architectures
-- Detect potential issues and improvements
-- Generate code documentation
-- Provide code quality metrics
-- Suggest refactoring opportunities
-
-### PlanningAgent
-Strategic planning for complex development tasks.
-
-**Capabilities:**
-- Break down complex tasks into steps
-- Create implementation roadmaps
-- Analyze requirements and dependencies
-- Estimate effort and complexity
-- Identify risks and challenges
-- Plan testing and validation strategies
-
-## 🛠️ Available Tools
-
-### File Operations
-- `read_file`: Read file contents
-- `write_file`: Write content to files
-- `list_directory`: List directory contents
-- `search_files`: Search for files matching patterns
-
-### Git Operations
-- `git_status`: Get repository status
-- `git_diff`: Show changes
-- `git_log`: View commit history
-- `git_add`: Stage files
-- `git_commit`: Create commits
-
-### Code Analysis
-- `analyze_code`: Extract code structure (functions, classes, imports)
-- `refactor_code`: Apply safe code transformations
-
-## ⚙️ Configuration
-
-Configuration is managed through environment variables. Create a `.env` file:
-
-```env
-# OpenRouter Configuration (Required)
-OPENROUTER_API_KEY=your_openrouter_api_key_here
-OPENROUTER_MODEL=google/gemini-2.0-flash-experimental
+## Project Structure
 
-# Agent Configuration
-MAX_CONCURRENT_AGENTS=3
-MAX_CONTEXT_LENGTH=100000
-TEMPERATURE=0.1
-
-# Tool Configuration
-MAX_FILE_SIZE_KB=500
-ENABLE_GIT_OPERATIONS=true
-ENABLE_FILE_OPERATIONS=true
-
-# Logging
-LOG_LEVEL=info
-LOG_TO_FILE=false
 ```
-
-### Configuration Commands
-
-```bash
-# Show current configuration
-devrev-coder config --show
-
-# Initialize .env file
-devrev-coder config --init
+src/
+├── agents/                     # Agent implementations
+│   ├── orchestrator/          # Orchestrator agent
+│   ├── subagents/            # Explorer and Coder agents
+│   ├── actions/              # Action system
+│   └── state/                # State management
+├── core/                      # Core utilities
+│   ├── llm/                  # LLM client
+│   ├── execution/            # Command execution
+│   └── logging/              # Logging utilities
+└── types/                     # TypeScript type definitions
 ```
 
-## 💡 Example Use Cases
+## Configuration
 
-### Code Analysis and Improvement
+### OpenRouter (Recommended)
+OpenRouter provides access to multiple LLM providers through a single API:
 
 ```bash
-devrev-coder chat
-
-# Example conversation:
-> Analyze my React components and suggest performance improvements
-> What security vulnerabilities can you find in my authentication system?
-> Review my database queries for potential optimizations
+export OPENROUTER_API_KEY="your-openrouter-key"
+export LITELLM_MODEL="anthropic/claude-3.5-sonnet"  # or any OpenRouter model
+export LITELLM_TEMPERATURE="0.1"
 ```
 
-### Feature Development
-
+### Direct OpenAI
 ```bash
-# Plan and implement a complete feature
-devrev-coder exec "Plan and implement a REST API for user management with CRUD operations"
-
-# Add specific functionality
-devrev-coder exec "Add input validation and error handling to all API endpoints"
+export OPENAI_API_KEY="your-openai-key"
+export LITELLM_MODEL="gpt-4"
+export LITELLM_TEMPERATURE="0.1"
 ```
 
-### Refactoring and Maintenance
-
+### Other Providers (LiteLLM Compatible)
 ```bash
-# Code quality improvements
-devrev-coder exec "Refactor the codebase to follow SOLID principles"
-
-# Update dependencies
-devrev-coder exec "Update all npm dependencies and fix any breaking changes"
-
-# Add testing
-devrev-coder exec "Add unit tests for all service classes with at least 80% coverage"
-```
-
-## 🏗️ Architecture
-
-```
-src/
-├── agents/           # AI agents (Coding, Analysis, Planning)
-├── tools/           # Available tools for agents
-├── core/           # Core system components
-│   ├── config.ts      # Configuration management
-│   ├── logger.ts      # Logging system
-│   ├── llm-client.ts  # OpenRouter integration
-│   └── repository-analyzer.ts # Codebase analysis
-├── cli/            # Command-line interface
-├── types/          # TypeScript type definitions
-└── utils/          # Utility functions
+export LITE_LLM_API_KEY="your-api-key"
+export LITE_LLM_API_BASE="your-api-base-url"
+export LITELLM_MODEL="your-model-name"
 ```
 
-### Key Components
-
-1. **Agent Orchestrator**: Manages agent selection and execution
-2. **Tool Registry**: Manages available tools and their execution
-3. **Repository Analyzer**: Understands codebase structure and context
-4. **LLM Client**: Handles communication with OpenRouter API
-5. **Configuration Manager**: Manages environment and runtime configuration
-
-## 🎨 Terminal UI Features
-
-- **Colored Output**: Different colors for different types of information
-- **Progress Indicators**: Spinners and progress bars for long operations
-- **Interactive Prompts**: User-friendly input collection
-- **Formatted Tables**: Clean display of structured data
-- **Error Handling**: Clear error messages with helpful suggestions
-
-## 🔧 Development
-
+### Popular Model Examples
 ```bash
-# Install dependencies
-npm install
-
-# Development mode with hot reload
-npm run dev
-
-# Build TypeScript
-npm run build
-
-# Run linting
-npm run lint
-
-# Run tests
-npm test
-```
-
-## 📝 API Usage
-
-You can also use DevRev Coder Agent programmatically:
+# Anthropic Claude via OpenRouter
+export LITELLM_MODEL="anthropic/claude-3.5-sonnet"
 
-```typescript
-import DevRevCoderAgent from 'devrev-coder-agent';
+# OpenAI GPT-4 via OpenRouter  
+export LITELLM_MODEL="openai/gpt-4"
 
-const agent = new DevRevCoderAgent({
-  openRouter: {
-    apiKey: 'your-api-key',
-    model: 'google/gemini-2.0-flash-experimental'
-  }
-});
+# Google Gemini via OpenRouter
+export LITELLM_MODEL="google/gemini-pro"
 
-// Execute a single request
-const result = await agent.executeRequest(
-  'Analyze this file and suggest improvements',
-  '/path/to/repository'
-);
-
-// Use multiple agents
-const results = await agent.executeWithMultipleAgents(
-  'Plan and implement a user authentication system',
-  '/path/to/repository'
-);
-
-// Get agent recommendations
-const recommendation = await agent.getAgentRecommendation(
-  'I need to refactor my database layer'
-);
+# Qwen Coder via OpenRouter
+export LITELLM_MODEL="qwen/qwen-2.5-coder-32b-instruct"
 ```
 
-## 🤝 Contributing
-
-1. Fork the repository
-2. Create a feature branch
-3. Make your changes
-4. Add tests if applicable
-5. Submit a pull request
-
-## 📄 License
-
-MIT License - see LICENSE file for details.
-
-## 🆘 Troubleshooting
-
-### Common Issues
-
-1. **Missing API Key**: Run `devrev-coder config --init` and add your OpenRouter API key
-2. **Permission Errors**: Make sure you have read/write permissions in the target directory
-3. **Large Files**: Increase `MAX_FILE_SIZE_KB` in your configuration for larger files
-4. **Rate Limits**: The system includes built-in rate limiting for API calls
-
-### Getting Help
-
-- Check the logs by setting `LOG_LEVEL=debug`
-- Use `devrev-coder --help` for command help
-- Review the examples above for common usage patterns
-
----
+## License
 
-**Built with ❤️ using TypeScript, OpenRouter, and Chalk**
+MIT
diff --git a/SETUP.md b/SETUP.md
deleted file mode 100644
index 740f215..0000000
--- a/SETUP.md
+++ /dev/null
@@ -1,129 +0,0 @@
-# DevRev Coder Agent - Setup Guide
-
-## Quick Setup Instructions
-
-1. **Install Dependencies**
-   ```bash
-   npm install
-   ```
-
-2. **Build the Project**
-   ```bash
-   npm run build
-   ```
-
-3. **Initialize Configuration**
-   ```bash
-   npm run dev config --init
-   ```
-   
-   Then edit the created `.env` file and add your OpenRouter API key:
-   ```env
-   OPENROUTER_API_KEY=your_actual_api_key_here
-   ```
-
-4. **Test the System**
-   ```bash
-   # Interactive mode
-   npm run dev chat
-   
-   # Or direct execution
-   npm run dev exec "Analyze this repository structure"
-   ```
-
-## Architecture Overview
-
-The DevRev Coder Agent is a sophisticated multi-agent AI system with the following components:
-
-### 🧠 Core System
-- **ConfigManager**: Handles environment variables and configuration
-- **OpenRouterClient**: Integrates with OpenRouter API for LLM calls  
-- **ConsoleLogger**: Beautiful terminal logging with Chalk colors
-- **RepositoryAnalyzer**: Analyzes codebase structure and technologies
-
-### 🤖 Agents
-- **CodingAgent**: Writes, modifies, and fixes code
-- **AnalysisAgent**: Analyzes codebases and provides insights
-- **PlanningAgent**: Creates detailed implementation plans
-- **AgentOrchestrator**: Manages agent selection and execution
-
-### 🛠️ Tool System
-- **File Operations**: read_file, write_file, list_directory, search_files
-- **Git Operations**: git_status, git_diff, git_log, git_add, git_commit
-- **Code Analysis**: analyze_code, refactor_code
-
-### 🖥️ CLI Interface
-- Interactive chat mode with conversation history
-- One-shot command execution
-- Repository analysis
-- Agent and tool management
-- Configuration setup
-
-## Key Features
-
-✅ **Multi-Agent Architecture**: Different agents for different tasks
-✅ **Context-Aware**: Understands repository structure and history
-✅ **Tool Integration**: Comprehensive set of development tools
-✅ **Beautiful UI**: Colored terminal output with Chalk
-✅ **OpenRouter Integration**: Uses Gemini 2.5 Flash model
-✅ **Structured Output**: Field names and data types included
-✅ **Rate Limiting**: Built-in API rate limiting
-✅ **Error Handling**: Graceful error handling and recovery
-✅ **Extensible**: Easy to add new agents and tools
-
-## Example Usage
-
-```bash
-# Start interactive mode
-devrev-coder chat
-
-# Analyze a repository
-devrev-coder analyze /path/to/repo
-
-# Execute specific tasks
-devrev-coder exec "Add unit tests to the UserService class"
-devrev-coder exec "Refactor the authentication system to use JWT"
-devrev-coder exec "Create a new API endpoint for user profiles"
-
-# Use multi-agent mode for complex tasks
-devrev-coder chat -m
-```
-
-## Memory Integration
-
-The system remembers user preferences:
-- Uses Gemini 2.5 flash model with OpenRouter
-- Provides structured output with field names and data types
-- Includes pretty-print options for tabular display
-
-## Development Commands
-
-```bash
-npm run build        # Compile TypeScript
-npm run dev         # Run in development mode with hot reload
-npm run lint        # Run ESLint
-npm test            # Run tests
-npm run clean       # Clean build artifacts
-```
-
-## Environment Variables
-
-Create a `.env` file with these variables:
-
-```env
-# Required
-OPENROUTER_API_KEY=your_api_key
-
-# Optional (with defaults)
-OPENROUTER_MODEL=google/gemini-2.0-flash-experimental
-MAX_CONCURRENT_AGENTS=3
-MAX_CONTEXT_LENGTH=100000
-TEMPERATURE=0.1
-MAX_FILE_SIZE_KB=500
-ENABLE_GIT_OPERATIONS=true
-ENABLE_FILE_OPERATIONS=true
-LOG_LEVEL=info
-LOG_TO_FILE=false
-```
-
-The system is fully functional and ready to use! 🚀
diff --git a/package-lock.json b/package-lock.json
index 5c05b80..d67fa0c 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,45 +1,37 @@
 {
-  "name": "devrev-coder-agent",
-  "version": "1.0.0",
+  "name": "multi-agent-coding-system-ts",
+  "version": "0.1.0",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
-      "name": "devrev-coder-agent",
-      "version": "1.0.0",
+      "name": "multi-agent-coding-system-ts",
+      "version": "0.1.0",
       "license": "MIT",
       "dependencies": {
-        "axios": "^1.6.2",
-        "chalk": "^5.3.0",
-        "commander": "^11.1.0",
-        "dotenv": "^16.3.1",
-        "fs-extra": "^11.1.1",
-        "glob": "^10.3.10",
-        "ignore": "^5.3.0",
-        "inquirer": "^9.2.12",
-        "nanoid": "^5.0.4",
-        "ora": "^7.0.1",
-        "simple-git": "^3.20.0",
-        "yaml": "^2.3.4",
-        "zod": "^3.22.4"
+        "axios": "^1.6.0",
+        "commander": "^11.0.0",
+        "dotenv": "^17.2.2",
+        "js-yaml": "^4.1.0",
+        "openai": "^4.0.0",
+        "winston": "^3.11.0",
+        "zod": "^3.22.0"
       },
       "bin": {
-        "devrev-coder": "dist/cli.js"
+        "terminal-agent": "dist/index.js"
       },
       "devDependencies": {
-        "@types/fs-extra": "^11.0.4",
-        "@types/inquirer": "^9.0.7",
-        "@types/jest": "^29.5.8",
-        "@types/node": "^20.10.0",
-        "@typescript-eslint/eslint-plugin": "^6.13.1",
-        "@typescript-eslint/parser": "^6.13.1",
-        "eslint": "^8.54.0",
-        "jest": "^29.7.0",
-        "tsx": "^4.6.0",
-        "typescript": "^5.3.2"
-      },
-      "engines": {
-        "node": ">=18.0.0"
+        "@types/jest": "^29.0.0",
+        "@types/js-yaml": "^4.0.0",
+        "@types/node": "^20.0.0",
+        "@typescript-eslint/eslint-plugin": "^6.0.0",
+        "@typescript-eslint/parser": "^6.0.0",
+        "eslint": "^8.0.0",
+        "jest": "^29.0.0",
+        "prettier": "^3.0.0",
+        "ts-jest": "^29.0.0",
+        "tsx": "^4.0.0",
+        "typescript": "^5.0.0"
       }
     },
     "node_modules/@babel/code-frame": {
@@ -558,6 +550,26 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/@colors/colors": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
+      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.1.90"
+      }
+    },
+    "node_modules/@dabh/diagnostics": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
+      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
+      "license": "MIT",
+      "dependencies": {
+        "colorspace": "1.1.x",
+        "enabled": "2.0.x",
+        "kuler": "^2.0.0"
+      }
+    },
     "node_modules/@esbuild/aix-ppc64": {
       "version": "0.25.9",
       "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.9.tgz",
@@ -1149,111 +1161,6 @@
       "dev": true,
       "license": "BSD-3-Clause"
     },
-    "node_modules/@inquirer/figures": {
-      "version": "1.0.13",
-      "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz",
-      "integrity": "sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@isaacs/cliui": {
-      "version": "8.0.2",
-      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
-      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
-      "license": "ISC",
-      "dependencies": {
-        "string-width": "^5.1.2",
-        "string-width-cjs": "npm:string-width@^4.2.0",
-        "strip-ansi": "^7.0.1",
-        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
-        "wrap-ansi": "^8.1.0",
-        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
-      "version": "6.2.2",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
-      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
-      "version": "6.2.3",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
-      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
-      "version": "9.2.2",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
-      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
-      "license": "MIT"
-    },
-    "node_modules/@isaacs/cliui/node_modules/string-width": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
-      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
-      "license": "MIT",
-      "dependencies": {
-        "eastasianwidth": "^0.2.0",
-        "emoji-regex": "^9.2.2",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
-      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
-      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^6.1.0",
-        "string-width": "^5.0.1",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
     "node_modules/@istanbuljs/load-nyc-config": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
@@ -1389,39 +1296,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/@jest/console/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@jest/console/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/@jest/core": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
@@ -1470,39 +1344,6 @@
         }
       }
     },
-    "node_modules/@jest/core/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@jest/core/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/@jest/environment": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
@@ -1624,85 +1465,6 @@
         }
       }
     },
-    "node_modules/@jest/reporters/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@jest/reporters/node_modules/brace-expansion": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/@jest/reporters/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/@jest/reporters/node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/@jest/reporters/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
     "node_modules/@jest/schemas": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
@@ -1790,39 +1552,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/@jest/transform/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@jest/transform/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/@jest/types": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
@@ -1841,43 +1570,10 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/@jest/types/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/@jest/types/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.13",
-      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
-      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.13",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
+      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -1914,9 +1610,9 @@
       "license": "MIT"
     },
     "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.30",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.30.tgz",
-      "integrity": "sha512-GQ7Nw5G2lTu/BtHTKfXhKHok2WGetd4XYcVKGx00SjAk8GMwgJM3zr6zORiPGuOE+/vkc90KtTosSSvaCjKb2Q==",
+      "version": "0.3.31",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
+      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -1924,21 +1620,6 @@
         "@jridgewell/sourcemap-codec": "^1.4.14"
       }
     },
-    "node_modules/@kwsites/file-exists": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/@kwsites/file-exists/-/file-exists-1.1.1.tgz",
-      "integrity": "sha512-m9/5YGR18lIwxSFDwfE3oA7bWuq9kdau6ugN4H2rJeyhFQZcG9AgSHkQtSD15a8WvTgfz9aikZMrKPHvbpqFiw==",
-      "license": "MIT",
-      "dependencies": {
-        "debug": "^4.1.1"
-      }
-    },
-    "node_modules/@kwsites/promise-deferred": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/@kwsites/promise-deferred/-/promise-deferred-1.1.1.tgz",
-      "integrity": "sha512-GaHYm+c0O9MjZRu0ongGBRbinu8gVAMd2UZjji6jVmqKtZluZnptXGWhz1E8j8D2HJ3f/yMxKAUC0b+57wncIw==",
-      "license": "MIT"
-    },
     "node_modules/@nodelib/fs.scandir": {
       "version": "2.1.5",
       "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
@@ -1977,16 +1658,6 @@
         "node": ">= 8"
       }
     },
-    "node_modules/@pkgjs/parseargs": {
-      "version": "0.11.0",
-      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
-      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
-      "license": "MIT",
-      "optional": true,
-      "engines": {
-        "node": ">=14"
-      }
-    },
     "node_modules/@sinclair/typebox": {
       "version": "0.27.8",
       "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
@@ -2059,17 +1730,6 @@
         "@babel/types": "^7.28.2"
       }
     },
-    "node_modules/@types/fs-extra": {
-      "version": "11.0.4",
-      "resolved": "https://registry.npmjs.org/@types/fs-extra/-/fs-extra-11.0.4.tgz",
-      "integrity": "sha512-yTbItCNreRooED33qjunPthRcSjERP1r4MqCZc7wv0u2sUkzTFp45tgUfS5+r7FrZPdmCCNflLhVSP/o+SemsQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/jsonfile": "*",
-        "@types/node": "*"
-      }
-    },
     "node_modules/@types/graceful-fs": {
       "version": "4.1.9",
       "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
@@ -2080,17 +1740,6 @@
         "@types/node": "*"
       }
     },
-    "node_modules/@types/inquirer": {
-      "version": "9.0.9",
-      "resolved": "https://registry.npmjs.org/@types/inquirer/-/inquirer-9.0.9.tgz",
-      "integrity": "sha512-/mWx5136gts2Z2e5izdoRCo46lPp5TMs9R15GTSsgg/XnZyxDWVqoVU3R9lWnccKpqwsJLvRoxbCjoJtZB7DSw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/through": "*",
-        "rxjs": "^7.2.0"
-      }
-    },
     "node_modules/@types/istanbul-lib-coverage": {
       "version": "2.0.6",
       "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
@@ -2129,6 +1778,13 @@
         "pretty-format": "^29.0.0"
       }
     },
+    "node_modules/@types/js-yaml": {
+      "version": "4.0.9",
+      "resolved": "https://registry.npmjs.org/@types/js-yaml/-/js-yaml-4.0.9.tgz",
+      "integrity": "sha512-k4MGaQl5TGo/iipqb2UDG2UwjXziSWkh0uysQelTlJpX1qGlpUZYm8PnO4DxG1qBomtJUdYJ6qR6xdIah10JLg==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/json-schema": {
       "version": "7.0.15",
       "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
@@ -2136,26 +1792,25 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/jsonfile": {
-      "version": "6.1.4",
-      "resolved": "https://registry.npmjs.org/@types/jsonfile/-/jsonfile-6.1.4.tgz",
-      "integrity": "sha512-D5qGUYwjvnNNextdU59/+fI+spnwtTFmyQP0h+PfIOSkNfpU6AOICUOkm4i0OnSk+NyjdPJrxCDro0sJsWlRpQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
-    },
     "node_modules/@types/node": {
       "version": "20.19.13",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.13.tgz",
       "integrity": "sha512-yCAeZl7a0DxgNVteXFHt9+uyFbqXGy/ShC4BlcHkoE0AfGXYv/BUiplV72DjMYXHDBXFjhvr6DD1NiRVfB4j8g==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "undici-types": "~6.21.0"
       }
     },
+    "node_modules/@types/node-fetch": {
+      "version": "2.6.13",
+      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.13.tgz",
+      "integrity": "sha512-QGpRVpzSaUs30JBSGPjOg4Uveu384erbHBoT1zeONvyCfwQxIkUshLAOqN/k9EjGviPRmWTTe6aH2qySWKTVSw==",
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*",
+        "form-data": "^4.0.4"
+      }
+    },
     "node_modules/@types/semver": {
       "version": "7.7.1",
       "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.7.1.tgz",
@@ -2170,15 +1825,11 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/@types/through": {
-      "version": "0.0.33",
-      "resolved": "https://registry.npmjs.org/@types/through/-/through-0.0.33.tgz",
-      "integrity": "sha512-HsJ+z3QuETzP3cswwtzt2vEIiHBk/dCcHGhbmG5X3ecnwFD/lPrMpliGXxSCg03L9AhrdwA4Oz/qfspkDW+xGQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@types/node": "*"
-      }
+    "node_modules/@types/triple-beam": {
+      "version": "1.3.5",
+      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
+      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==",
+      "license": "MIT"
     },
     "node_modules/@types/yargs": {
       "version": "17.0.33",
@@ -2402,6 +2053,18 @@
       "dev": true,
       "license": "ISC"
     },
+    "node_modules/abort-controller": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
+      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
+      "license": "MIT",
+      "dependencies": {
+        "event-target-shim": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=6.5"
+      }
+    },
     "node_modules/acorn": {
       "version": "8.15.0",
       "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
@@ -2425,6 +2088,18 @@
         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
       }
     },
+    "node_modules/agentkeepalive": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
+      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
+      "license": "MIT",
+      "dependencies": {
+        "humanize-ms": "^1.2.1"
+      },
+      "engines": {
+        "node": ">= 8.0.0"
+      }
+    },
     "node_modules/ajv": {
       "version": "6.12.6",
       "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
@@ -2446,6 +2121,7 @@
       "version": "4.3.2",
       "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
       "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "type-fest": "^0.21.3"
@@ -2461,6 +2137,7 @@
       "version": "0.21.3",
       "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
       "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
+      "dev": true,
       "license": "(MIT OR CC0-1.0)",
       "engines": {
         "node": ">=10"
@@ -2473,19 +2150,23 @@
       "version": "5.0.1",
       "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
       "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/ansi-styles": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
-      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
       "dev": true,
       "license": "MIT",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
       "engines": {
-        "node": ">=10"
+        "node": ">=8"
       },
       "funding": {
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
@@ -2509,7 +2190,6 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true,
       "license": "Python-2.0"
     },
     "node_modules/array-union": {
@@ -2522,6 +2202,12 @@
         "node": ">=8"
       }
     },
+    "node_modules/async": {
+      "version": "3.2.6",
+      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
+      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
+      "license": "MIT"
+    },
     "node_modules/asynckit": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
@@ -2529,9 +2215,9 @@
       "license": "MIT"
     },
     "node_modules/axios": {
-      "version": "1.11.0",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
-      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
+      "version": "1.12.1",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.12.1.tgz",
+      "integrity": "sha512-Kn4kbSXpkFHCGE6rBFNwIv0GQs4AvDT80jlveJDKFxjbTYMUeB4QtsdPCv6H8Cm19Je7IU6VFtRl2zWZI0rudQ==",
       "license": "MIT",
       "dependencies": {
         "follow-redirects": "^1.15.6",
@@ -2561,39 +2247,6 @@
         "@babel/core": "^7.8.0"
       }
     },
-    "node_modules/babel-jest/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/babel-jest/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/babel-plugin-istanbul": {
       "version": "6.1.1",
       "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
@@ -2702,43 +2355,24 @@
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
       "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true,
       "license": "MIT"
     },
-    "node_modules/base64-js": {
-      "version": "1.5.1",
-      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
-      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT"
-    },
-    "node_modules/bl": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/bl/-/bl-5.1.0.tgz",
-      "integrity": "sha512-tv1ZJHLfTDnXE6tMHv73YgSJaWR2AFuPwMntBe7XL/GBFHnT0CLnsHMogfk5+GzCDC5ZWarSCYaIGATZt9dNsQ==",
-      "license": "MIT",
-      "dependencies": {
-        "buffer": "^6.0.3",
-        "inherits": "^2.0.4",
-        "readable-stream": "^3.4.0"
+    "node_modules/baseline-browser-mapping": {
+      "version": "2.8.2",
+      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.2.tgz",
+      "integrity": "sha512-NvcIedLxrs9llVpX7wI+Jz4Hn9vJQkCPKrTaHIE0sW/Rj1iq6Fzby4NbyTZjQJNoypBXNaG7tEHkTgONZpwgxQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "baseline-browser-mapping": "dist/cli.js"
       }
     },
     "node_modules/brace-expansion": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
       "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "balanced-match": "^1.0.0"
@@ -2758,9 +2392,9 @@
       }
     },
     "node_modules/browserslist": {
-      "version": "4.25.4",
-      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.4.tgz",
-      "integrity": "sha512-4jYpcjabC606xJ3kw2QwGEZKX0Aw7sgQdZCvIK9dhVSPh76BKo+C+btT1RRofH7B+8iNpEbgGNVWiLki5q93yg==",
+      "version": "4.26.0",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.26.0.tgz",
+      "integrity": "sha512-P9go2WrP9FiPwLv3zqRD/Uoxo0RSHjzFCiQz7d4vbmwNqQFo9T9WCeP/Qn5EbcKQY6DBbkxEXNcpJOmncNrb7A==",
       "dev": true,
       "funding": [
         {
@@ -2778,9 +2412,10 @@
       ],
       "license": "MIT",
       "dependencies": {
-        "caniuse-lite": "^1.0.30001737",
-        "electron-to-chromium": "^1.5.211",
-        "node-releases": "^2.0.19",
+        "baseline-browser-mapping": "^2.8.2",
+        "caniuse-lite": "^1.0.30001741",
+        "electron-to-chromium": "^1.5.218",
+        "node-releases": "^2.0.21",
         "update-browserslist-db": "^1.1.3"
       },
       "bin": {
@@ -2790,6 +2425,19 @@
         "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
       }
     },
+    "node_modules/bs-logger": {
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/bs-logger/-/bs-logger-0.2.6.tgz",
+      "integrity": "sha512-pd8DCoxmbgc7hyPKOvxtqNcjYoOsABPQdcCUjGp3d42VR2CX1ORhk2A87oqqu5R1kk+76nsxZupkmyd+MVtCog==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "fast-json-stable-stringify": "2.x"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
     "node_modules/bser": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
@@ -2800,30 +2448,6 @@
         "node-int64": "^0.4.0"
       }
     },
-    "node_modules/buffer": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
-      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.2.1"
-      }
-    },
     "node_modules/buffer-from": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
@@ -2886,12 +2510,17 @@
       "license": "CC-BY-4.0"
     },
     "node_modules/chalk": {
-      "version": "5.6.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.6.2.tgz",
-      "integrity": "sha512-7NzBL0rN6fMUW+f7A6Io4h40qQlG+xGmtMxfbnH/K7TAtt8JQWVQK+6g0UXKMeVJoyV5EkkNsErQ8pVD3bLHbA==",
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dev": true,
       "license": "MIT",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
       "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+        "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/chalk/chalk?sponsor=1"
@@ -2907,12 +2536,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/chardet": {
-      "version": "0.7.0",
-      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
-      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
-      "license": "MIT"
-    },
     "node_modules/ci-info": {
       "version": "3.9.0",
       "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
@@ -2936,42 +2559,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/cli-cursor": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz",
-      "integrity": "sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==",
-      "license": "MIT",
-      "dependencies": {
-        "restore-cursor": "^4.0.0"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/cli-spinners": {
-      "version": "2.9.2",
-      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
-      "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/cli-width": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
-      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
-      "license": "ISC",
-      "engines": {
-        "node": ">= 12"
-      }
-    },
     "node_modules/cliui": {
       "version": "8.0.1",
       "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
@@ -2987,49 +2574,6 @@
         "node": ">=12"
       }
     },
-    "node_modules/cliui/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/cliui/node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
-    "node_modules/clone": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
-      "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
     "node_modules/co": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
@@ -3048,10 +2592,21 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+    "node_modules/color": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
+      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
+      "license": "MIT",
+      "dependencies": {
+        "color-convert": "^1.9.3",
+        "color-string": "^1.6.0"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
       "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "color-name": "~1.1.4"
@@ -3066,6 +2621,41 @@
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
       "license": "MIT"
     },
+    "node_modules/color-string": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
+      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "^1.0.0",
+        "simple-swizzle": "^0.2.2"
+      }
+    },
+    "node_modules/color/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "license": "MIT",
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/color/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "license": "MIT"
+    },
+    "node_modules/colorspace": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
+      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
+      "license": "MIT",
+      "dependencies": {
+        "color": "^3.1.3",
+        "text-hex": "1.0.x"
+      }
+    },
     "node_modules/combined-stream": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
@@ -3123,43 +2713,11 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/create-jest/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/create-jest/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
       "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "path-key": "^3.1.0",
@@ -3174,6 +2732,7 @@
       "version": "4.4.1",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
       "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ms": "^2.1.3"
@@ -3219,18 +2778,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/defaults": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz",
-      "integrity": "sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==",
-      "license": "MIT",
-      "dependencies": {
-        "clone": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/delayed-stream": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
@@ -3287,9 +2834,9 @@
       }
     },
     "node_modules/dotenv": {
-      "version": "16.6.1",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
-      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
+      "version": "17.2.2",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.2.tgz",
+      "integrity": "sha512-Sf2LSQP+bOlhKWWyhFsn0UsfdK/kCWRv1iuA2gXAwt3dyNabr6QSj00I2V10pidqz69soatm9ZwZvpQMTIOd5Q==",
       "license": "BSD-2-Clause",
       "engines": {
         "node": ">=12"
@@ -3312,16 +2859,10 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/eastasianwidth": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
-      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
-      "license": "MIT"
-    },
     "node_modules/electron-to-chromium": {
-      "version": "1.5.215",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.215.tgz",
-      "integrity": "sha512-TIvGp57UpeNetj/wV/xpFNpWGb0b/ROw372lHPx5Aafx02gjTBtWnEEcaSX3W2dLM3OSdGGyHX/cHl01JQsLaQ==",
+      "version": "1.5.218",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.218.tgz",
+      "integrity": "sha512-uwwdN0TUHs8u6iRgN8vKeWZMRll4gBkz+QMqdS7DDe49uiK68/UX92lFb61oiFPrpYZNeZIqa4bA7O6Aiasnzg==",
       "dev": true,
       "license": "ISC"
     },
@@ -3342,6 +2883,13 @@
       "version": "8.0.0",
       "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
       "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/enabled": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
+      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==",
       "license": "MIT"
     },
     "node_modules/error-ex": {
@@ -3551,22 +3099,6 @@
         "url": "https://opencollective.com/eslint"
       }
     },
-    "node_modules/eslint/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
     "node_modules/eslint/node_modules/brace-expansion": {
       "version": "1.1.12",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
@@ -3578,23 +3110,6 @@
         "concat-map": "0.0.1"
       }
     },
-    "node_modules/eslint/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/eslint/node_modules/minimatch": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
@@ -3686,6 +3201,15 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/event-target-shim": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
+      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/execa": {
       "version": "5.1.1",
       "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
@@ -3710,13 +3234,6 @@
         "url": "https://github.com/sindresorhus/execa?sponsor=1"
       }
     },
-    "node_modules/execa/node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "dev": true,
-      "license": "ISC"
-    },
     "node_modules/exit": {
       "version": "0.1.2",
       "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
@@ -3743,20 +3260,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/external-editor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
-      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
-      "license": "MIT",
-      "dependencies": {
-        "chardet": "^0.7.0",
-        "iconv-lite": "^0.4.24",
-        "tmp": "^0.0.33"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
     "node_modules/fast-deep-equal": {
       "version": "3.1.3",
       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
@@ -3828,6 +3331,12 @@
         "bser": "2.1.1"
       }
     },
+    "node_modules/fecha": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
+      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==",
+      "license": "MIT"
+    },
     "node_modules/file-entry-cache": {
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
@@ -3893,6 +3402,12 @@
       "dev": true,
       "license": "ISC"
     },
+    "node_modules/fn.name": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
+      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==",
+      "license": "MIT"
+    },
     "node_modules/follow-redirects": {
       "version": "1.15.11",
       "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.11.tgz",
@@ -3913,22 +3428,6 @@
         }
       }
     },
-    "node_modules/foreground-child": {
-      "version": "3.3.1",
-      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
-      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
-      "license": "ISC",
-      "dependencies": {
-        "cross-spawn": "^7.0.6",
-        "signal-exit": "^4.0.1"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/form-data": {
       "version": "4.0.4",
       "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
@@ -3945,18 +3444,23 @@
         "node": ">= 6"
       }
     },
-    "node_modules/fs-extra": {
-      "version": "11.3.1",
-      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.1.tgz",
-      "integrity": "sha512-eXvGGwZ5CL17ZSwHWd3bbgk7UUpF6IFHtP57NYYakPvHOs8GDgDe5KJI36jIJzDkJ6eJjuzRA8eBQb6SkKue0g==",
+    "node_modules/form-data-encoder": {
+      "version": "1.7.2",
+      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
+      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
+      "license": "MIT"
+    },
+    "node_modules/formdata-node": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
+      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
       "license": "MIT",
       "dependencies": {
-        "graceful-fs": "^4.2.0",
-        "jsonfile": "^6.0.1",
-        "universalify": "^2.0.0"
+        "node-domexception": "1.0.0",
+        "web-streams-polyfill": "4.0.0-beta.3"
       },
       "engines": {
-        "node": ">=14.14"
+        "node": ">= 12.20"
       }
     },
     "node_modules/fs.realpath": {
@@ -4084,20 +3588,22 @@
       }
     },
     "node_modules/glob": {
-      "version": "10.4.5",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
-      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "deprecated": "Glob versions prior to v9 are no longer supported",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
-        "foreground-child": "^3.1.0",
-        "jackspeak": "^3.1.2",
-        "minimatch": "^9.0.4",
-        "minipass": "^7.1.2",
-        "package-json-from-dist": "^1.0.0",
-        "path-scurry": "^1.11.1"
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
       },
-      "bin": {
-        "glob": "dist/esm/bin.mjs"
+      "engines": {
+        "node": "*"
       },
       "funding": {
         "url": "https://github.com/sponsors/isaacs"
@@ -4116,19 +3622,28 @@
         "node": ">=10.13.0"
       }
     },
+    "node_modules/glob/node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
     "node_modules/glob/node_modules/minimatch": {
-      "version": "9.0.5",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
-      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
-        "brace-expansion": "^2.0.1"
+        "brace-expansion": "^1.1.7"
       },
       "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
+        "node": "*"
       }
     },
     "node_modules/globals": {
@@ -4184,6 +3699,7 @@
       "version": "4.2.11",
       "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
       "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "dev": true,
       "license": "ISC"
     },
     "node_modules/graphemer": {
@@ -4193,10 +3709,33 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/handlebars": {
+      "version": "4.7.8",
+      "resolved": "https://registry.npmjs.org/handlebars/-/handlebars-4.7.8.tgz",
+      "integrity": "sha512-vafaFqs8MZkRrSX7sFVUdo3ap/eNiLnb4IakshzvP56X5Nr1iGKAIqdX6tMlm6HcNRIkr6AxO5jFEoJzzpT8aQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.2.5",
+        "neo-async": "^2.6.2",
+        "source-map": "^0.6.1",
+        "wordwrap": "^1.0.0"
+      },
+      "bin": {
+        "handlebars": "bin/handlebars"
+      },
+      "engines": {
+        "node": ">=0.4.7"
+      },
+      "optionalDependencies": {
+        "uglify-js": "^3.1.4"
+      }
+    },
     "node_modules/has-flag": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
       "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -4258,42 +3797,20 @@
         "node": ">=10.17.0"
       }
     },
-    "node_modules/iconv-lite": {
-      "version": "0.4.24",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
-      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+    "node_modules/humanize-ms": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
+      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
       "license": "MIT",
       "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3"
-      },
-      "engines": {
-        "node": ">=0.10.0"
+        "ms": "^2.0.0"
       }
     },
-    "node_modules/ieee754": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
-      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "BSD-3-Clause"
-    },
     "node_modules/ignore": {
       "version": "5.3.2",
       "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
       "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">= 4"
@@ -4364,223 +3881,44 @@
       "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
       "license": "ISC"
     },
-    "node_modules/inquirer": {
-      "version": "9.3.7",
-      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-9.3.7.tgz",
-      "integrity": "sha512-LJKFHCSeIRq9hanN14IlOtPSTe3lNES7TYDTE2xxdAy1LS5rYphajK1qtwvj3YmQXvvk0U2Vbmcni8P9EIQW9w==",
-      "license": "MIT",
-      "dependencies": {
-        "@inquirer/figures": "^1.0.3",
-        "ansi-escapes": "^4.3.2",
-        "cli-width": "^4.1.0",
-        "external-editor": "^3.1.0",
-        "mute-stream": "1.0.0",
-        "ora": "^5.4.1",
-        "run-async": "^3.0.0",
-        "rxjs": "^7.8.1",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1",
-        "wrap-ansi": "^6.2.0",
-        "yoctocolors-cjs": "^2.1.2"
-      },
-      "engines": {
-        "node": ">=18"
-      }
+    "node_modules/is-arrayish": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
+      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
+      "dev": true,
+      "license": "MIT"
     },
-    "node_modules/inquirer/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+    "node_modules/is-core-module": {
+      "version": "2.16.1",
+      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
+      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
-        "color-convert": "^2.0.1"
+        "hasown": "^2.0.2"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">= 0.4"
       },
       "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/inquirer/node_modules/bl": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
-      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "dev": true,
       "license": "MIT",
-      "dependencies": {
-        "buffer": "^5.5.0",
-        "inherits": "^2.0.4",
-        "readable-stream": "^3.4.0"
-      }
-    },
-    "node_modules/inquirer/node_modules/buffer": {
-      "version": "5.7.1",
-      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
-      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "license": "MIT",
-      "dependencies": {
-        "base64-js": "^1.3.1",
-        "ieee754": "^1.1.13"
-      }
-    },
-    "node_modules/inquirer/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/inquirer/node_modules/cli-cursor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
-      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
-      "license": "MIT",
-      "dependencies": {
-        "restore-cursor": "^3.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/is-interactive": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz",
-      "integrity": "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/is-unicode-supported": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
-      "integrity": "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/inquirer/node_modules/log-symbols": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
-      "integrity": "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==",
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.1.0",
-        "is-unicode-supported": "^0.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/inquirer/node_modules/ora": {
-      "version": "5.4.1",
-      "resolved": "https://registry.npmjs.org/ora/-/ora-5.4.1.tgz",
-      "integrity": "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==",
-      "license": "MIT",
-      "dependencies": {
-        "bl": "^4.1.0",
-        "chalk": "^4.1.0",
-        "cli-cursor": "^3.1.0",
-        "cli-spinners": "^2.5.0",
-        "is-interactive": "^1.0.0",
-        "is-unicode-supported": "^0.1.0",
-        "log-symbols": "^4.1.0",
-        "strip-ansi": "^6.0.0",
-        "wcwidth": "^1.0.1"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/inquirer/node_modules/restore-cursor": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
-      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
-      "license": "MIT",
-      "dependencies": {
-        "onetime": "^5.1.0",
-        "signal-exit": "^3.0.2"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inquirer/node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "license": "ISC"
-    },
-    "node_modules/is-arrayish": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true,
-      "license": "MIT"
-    },
-    "node_modules/is-core-module": {
-      "version": "2.16.1",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
-      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "hasown": "^2.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-extglob": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
-      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
-      "dev": true,
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
+      "engines": {
+        "node": ">=0.10.0"
       }
     },
     "node_modules/is-fullwidth-code-point": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
       "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -4609,18 +3947,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/is-interactive": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz",
-      "integrity": "sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/is-number": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
@@ -4645,7 +3971,6 @@
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
       "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
-      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -4654,22 +3979,11 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/is-unicode-supported": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
-      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/isexe": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
       "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true,
       "license": "ISC"
     },
     "node_modules/istanbul-lib-coverage": {
@@ -4743,21 +4057,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/jackspeak": {
-      "version": "3.4.3",
-      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
-      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
-      "license": "BlueOak-1.0.0",
-      "dependencies": {
-        "@isaacs/cliui": "^8.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      },
-      "optionalDependencies": {
-        "@pkgjs/parseargs": "^0.11.0"
-      }
-    },
     "node_modules/jest": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
@@ -4832,39 +4131,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-circus/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-circus/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-cli": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
@@ -4899,39 +4165,6 @@
         }
       }
     },
-    "node_modules/jest-cli/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-cli/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-config": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
@@ -4978,197 +4211,52 @@
         }
       }
     },
-    "node_modules/jest-config/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+    "node_modules/jest-diff": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
+      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "color-convert": "^2.0.1"
+        "chalk": "^4.0.0",
+        "diff-sequences": "^29.6.3",
+        "jest-get-type": "^29.6.3",
+        "pretty-format": "^29.7.0"
       },
       "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-config/node_modules/brace-expansion": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+    "node_modules/jest-docblock": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
+      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
+        "detect-newline": "^3.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-config/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+    "node_modules/jest-each": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
+      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/jest-config/node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/jest-config/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/jest-diff": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
-      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^4.0.0",
-        "diff-sequences": "^29.6.3",
-        "jest-get-type": "^29.6.3",
-        "pretty-format": "^29.7.0"
+        "@jest/types": "^29.6.3",
+        "chalk": "^4.0.0",
+        "jest-get-type": "^29.6.3",
+        "jest-util": "^29.7.0",
+        "pretty-format": "^29.7.0"
       },
       "engines": {
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-diff/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-diff/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/jest-docblock": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
-      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "detect-newline": "^3.0.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-each": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
-      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/types": "^29.6.3",
-        "chalk": "^4.0.0",
-        "jest-get-type": "^29.6.3",
-        "jest-util": "^29.7.0",
-        "pretty-format": "^29.7.0"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-each/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-each/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-environment-node": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
@@ -5253,39 +4341,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-matcher-utils/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-matcher-utils/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-message-util": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
@@ -5307,39 +4362,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-message-util/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-message-util/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-mock": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
@@ -5418,39 +4440,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-resolve/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-resolve/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-runner": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
@@ -5484,39 +4473,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-runner/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-runner/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-runtime": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
@@ -5551,85 +4507,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-runtime/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-runtime/node_modules/brace-expansion": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/jest-runtime/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/jest-runtime/node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/jest-runtime/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
     "node_modules/jest-snapshot": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
@@ -5662,39 +4539,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-snapshot/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-snapshot/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-util": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
@@ -5713,39 +4557,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-util/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/jest-util/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
     "node_modules/jest-validate": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
@@ -5764,22 +4575,6 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
-    "node_modules/jest-validate/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
     "node_modules/jest-validate/node_modules/camelcase": {
       "version": "6.3.0",
       "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
@@ -5790,77 +4585,27 @@
         "node": ">=10"
       },
       "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/jest-validate/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/jest-watcher": {
-      "version": "29.7.0",
-      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
-      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "@jest/test-result": "^29.7.0",
-        "@jest/types": "^29.6.3",
-        "@types/node": "*",
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.0.0",
-        "emittery": "^0.13.1",
-        "jest-util": "^29.7.0",
-        "string-length": "^4.0.1"
-      },
-      "engines": {
-        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
-      }
-    },
-    "node_modules/jest-watcher/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+        "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/jest-watcher/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+    "node_modules/jest-watcher": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
+      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
+        "@jest/test-result": "^29.7.0",
+        "@jest/types": "^29.6.3",
+        "@types/node": "*",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.0.0",
+        "emittery": "^0.13.1",
+        "jest-util": "^29.7.0",
+        "string-length": "^4.0.1"
       },
       "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
     "node_modules/jest-worker": {
@@ -5906,7 +4651,6 @@
       "version": "4.1.0",
       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
       "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
-      "dev": true,
       "license": "MIT",
       "dependencies": {
         "argparse": "^2.0.1"
@@ -5969,18 +4713,6 @@
         "node": ">=6"
       }
     },
-    "node_modules/jsonfile": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
-      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
-      "license": "MIT",
-      "dependencies": {
-        "universalify": "^2.0.0"
-      },
-      "optionalDependencies": {
-        "graceful-fs": "^4.1.6"
-      }
-    },
     "node_modules/keyv": {
       "version": "4.5.4",
       "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
@@ -6001,6 +4733,12 @@
         "node": ">=6"
       }
     },
+    "node_modules/kuler": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
+      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==",
+      "license": "MIT"
+    },
     "node_modules/leven": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
@@ -6048,6 +4786,13 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/lodash.memoize": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
+      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
@@ -6055,20 +4800,21 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/log-symbols": {
-      "version": "5.1.0",
-      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-5.1.0.tgz",
-      "integrity": "sha512-l0x2DvrW294C9uDCoQe1VSU4gf529FkSZ6leBl4TiqZH/e+0R7hSfHQBNut2mNygDgHwvYHfFLn6Oxb3VWj2rA==",
+    "node_modules/logform": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
+      "integrity": "sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==",
       "license": "MIT",
       "dependencies": {
-        "chalk": "^5.0.0",
-        "is-unicode-supported": "^1.1.0"
+        "@colors/colors": "1.6.0",
+        "@types/triple-beam": "^1.3.2",
+        "fecha": "^4.2.0",
+        "ms": "^2.1.1",
+        "safe-stable-stringify": "^2.3.1",
+        "triple-beam": "^1.3.0"
       },
       "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
+        "node": ">= 12.0.0"
       }
     },
     "node_modules/lru-cache": {
@@ -6097,6 +4843,13 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
+      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/makeerror": {
       "version": "1.0.12",
       "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
@@ -6172,6 +4925,7 @@
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
       "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=6"
@@ -6193,13 +4947,14 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
-    "node_modules/minipass": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
-      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
+    "node_modules/minimist": {
+      "version": "1.2.8",
+      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
+      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
+      "dev": true,
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/ms": {
@@ -6208,39 +4963,59 @@
       "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
       "license": "MIT"
     },
-    "node_modules/mute-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
-      "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
-      "license": "ISC",
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
+    "node_modules/natural-compare": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
+      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/neo-async": {
+      "version": "2.6.2",
+      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
+      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
+      "dev": true,
+      "license": "MIT"
     },
-    "node_modules/nanoid": {
-      "version": "5.1.5",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-5.1.5.tgz",
-      "integrity": "sha512-Ir/+ZpE9fDsNH0hQ3C68uyThDXzYcim2EqcZ8zn8Chtt1iylPT9xXJB0kPCnqzgcEGikO9RxSrh63MsmVCU7Fw==",
+    "node_modules/node-domexception": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
+      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
+      "deprecated": "Use your platform's native DOMException instead",
       "funding": [
         {
           "type": "github",
-          "url": "https://github.com/sponsors/ai"
+          "url": "https://github.com/sponsors/jimmywarting"
+        },
+        {
+          "type": "github",
+          "url": "https://paypal.me/jimmywarting"
         }
       ],
       "license": "MIT",
-      "bin": {
-        "nanoid": "bin/nanoid.js"
-      },
       "engines": {
-        "node": "^18 || >=20"
+        "node": ">=10.5.0"
       }
     },
-    "node_modules/natural-compare": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
-      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
-      "dev": true,
-      "license": "MIT"
+    "node_modules/node-fetch": {
+      "version": "2.7.0",
+      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
+      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
+      "license": "MIT",
+      "dependencies": {
+        "whatwg-url": "^5.0.0"
+      },
+      "engines": {
+        "node": "4.x || >=6.0.0"
+      },
+      "peerDependencies": {
+        "encoding": "^0.1.0"
+      },
+      "peerDependenciesMeta": {
+        "encoding": {
+          "optional": true
+        }
+      }
     },
     "node_modules/node-int64": {
       "version": "0.4.0",
@@ -6250,9 +5025,9 @@
       "license": "MIT"
     },
     "node_modules/node-releases": {
-      "version": "2.0.20",
-      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.20.tgz",
-      "integrity": "sha512-7gK6zSXEH6neM212JgfYFXe+GmZQM+fia5SsusuBIUgnPheLFBmIPhtFoAQRj8/7wASYQnbDlHPVwY0BefoFgA==",
+      "version": "2.0.21",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.21.tgz",
+      "integrity": "sha512-5b0pgg78U3hwXkCM8Z9b2FJdPZlr9Psr9V2gQPESdGHqbntyFJKFW4r5TeWGFzafGY3hzs1JC62VEQMbl1JFkw==",
       "dev": true,
       "license": "MIT"
     },
@@ -6289,10 +5064,20 @@
         "wrappy": "1"
       }
     },
+    "node_modules/one-time": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
+      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
+      "license": "MIT",
+      "dependencies": {
+        "fn.name": "1.x.x"
+      }
+    },
     "node_modules/onetime": {
       "version": "5.1.2",
       "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
       "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "mimic-fn": "^2.1.0"
@@ -6304,6 +5089,51 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
+    "node_modules/openai": {
+      "version": "4.104.0",
+      "resolved": "https://registry.npmjs.org/openai/-/openai-4.104.0.tgz",
+      "integrity": "sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "@types/node": "^18.11.18",
+        "@types/node-fetch": "^2.6.4",
+        "abort-controller": "^3.0.0",
+        "agentkeepalive": "^4.2.1",
+        "form-data-encoder": "1.7.2",
+        "formdata-node": "^4.3.2",
+        "node-fetch": "^2.6.7"
+      },
+      "bin": {
+        "openai": "bin/cli"
+      },
+      "peerDependencies": {
+        "ws": "^8.18.0",
+        "zod": "^3.23.8"
+      },
+      "peerDependenciesMeta": {
+        "ws": {
+          "optional": true
+        },
+        "zod": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/openai/node_modules/@types/node": {
+      "version": "18.19.124",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.124.tgz",
+      "integrity": "sha512-hY4YWZFLs3ku6D2Gqo3RchTd9VRCcrjqp/I0mmohYeUVA5Y8eCXKJEasHxLAJVZRJuQogfd1GiJ9lgogBgKeuQ==",
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~5.26.4"
+      }
+    },
+    "node_modules/openai/node_modules/undici-types": {
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
+      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
+      "license": "MIT"
+    },
     "node_modules/optionator": {
       "version": "0.9.4",
       "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
@@ -6322,88 +5152,6 @@
         "node": ">= 0.8.0"
       }
     },
-    "node_modules/ora": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/ora/-/ora-7.0.1.tgz",
-      "integrity": "sha512-0TUxTiFJWv+JnjWm4o9yvuskpEJLXTcng8MJuKd+SzAzp2o+OP3HWqNhB4OdJRt1Vsd9/mR0oyaEYlOnL7XIRw==",
-      "license": "MIT",
-      "dependencies": {
-        "chalk": "^5.3.0",
-        "cli-cursor": "^4.0.0",
-        "cli-spinners": "^2.9.0",
-        "is-interactive": "^2.0.0",
-        "is-unicode-supported": "^1.3.0",
-        "log-symbols": "^5.1.0",
-        "stdin-discarder": "^0.1.0",
-        "string-width": "^6.1.0",
-        "strip-ansi": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/ora/node_modules/ansi-regex": {
-      "version": "6.2.2",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
-      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
-      }
-    },
-    "node_modules/ora/node_modules/emoji-regex": {
-      "version": "10.5.0",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.5.0.tgz",
-      "integrity": "sha512-lb49vf1Xzfx080OKA0o6l8DQQpV+6Vg95zyCJX9VB/BqKYlhG7N4wgROUUHRA+ZPUefLnteQOad7z1kT2bV7bg==",
-      "license": "MIT"
-    },
-    "node_modules/ora/node_modules/string-width": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-6.1.0.tgz",
-      "integrity": "sha512-k01swCJAgQmuADB0YIc+7TuatfNvTBVOoaUWJjTB9R4VJzR5vNWzf5t42ESVZFPS8xTySF7CAdV4t/aaIm3UnQ==",
-      "license": "MIT",
-      "dependencies": {
-        "eastasianwidth": "^0.2.0",
-        "emoji-regex": "^10.2.1",
-        "strip-ansi": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=16"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/ora/node_modules/strip-ansi": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
-      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
-      }
-    },
-    "node_modules/os-tmpdir": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
-      "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/p-limit": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
@@ -6446,12 +5194,6 @@
         "node": ">=6"
       }
     },
-    "node_modules/package-json-from-dist": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
-      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
-      "license": "BlueOak-1.0.0"
-    },
     "node_modules/parent-module": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
@@ -6508,6 +5250,7 @@
       "version": "3.1.1",
       "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
       "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
@@ -6520,28 +5263,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/path-scurry": {
-      "version": "1.11.1",
-      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
-      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
-      "license": "BlueOak-1.0.0",
-      "dependencies": {
-        "lru-cache": "^10.2.0",
-        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.18"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/path-scurry/node_modules/lru-cache": {
-      "version": "10.4.3",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
-      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
-      "license": "ISC"
-    },
     "node_modules/path-type": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
@@ -6661,6 +5382,22 @@
         "node": ">= 0.8.0"
       }
     },
+    "node_modules/prettier": {
+      "version": "3.6.2",
+      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
+      "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "prettier": "bin/prettier.cjs"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/prettier/prettier?sponsor=1"
+      }
+    },
     "node_modules/pretty-format": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
@@ -6676,6 +5413,19 @@
         "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
       }
     },
+    "node_modules/pretty-format/node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
     "node_modules/prompts": {
       "version": "2.4.2",
       "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
@@ -6849,28 +5599,6 @@
         "node": ">=10"
       }
     },
-    "node_modules/restore-cursor": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz",
-      "integrity": "sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==",
-      "license": "MIT",
-      "dependencies": {
-        "onetime": "^5.1.0",
-        "signal-exit": "^3.0.2"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/restore-cursor/node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "license": "ISC"
-    },
     "node_modules/reusify": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
@@ -6893,65 +5621,10 @@
         "glob": "^7.1.3"
       },
       "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/rimraf/node_modules/brace-expansion": {
-      "version": "1.1.12",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-      "dev": true,
-      "license": "MIT",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/rimraf/node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/rimraf/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "rimraf": "bin.js"
       },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/run-async": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz",
-      "integrity": "sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.12.0"
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/run-parallel": {
@@ -6978,15 +5651,6 @@
         "queue-microtask": "^1.2.2"
       }
     },
-    "node_modules/rxjs": {
-      "version": "7.8.2",
-      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
-      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
-      "license": "Apache-2.0",
-      "dependencies": {
-        "tslib": "^2.1.0"
-      }
-    },
     "node_modules/safe-buffer": {
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
@@ -7007,11 +5671,14 @@
       ],
       "license": "MIT"
     },
-    "node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
-      "license": "MIT"
+    "node_modules/safe-stable-stringify": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
+      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      }
     },
     "node_modules/semver": {
       "version": "7.7.2",
@@ -7030,6 +5697,7 @@
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
       "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "shebang-regex": "^3.0.0"
@@ -7042,38 +5710,34 @@
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
       "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
       "license": "MIT",
       "engines": {
         "node": ">=8"
       }
     },
     "node_modules/signal-exit": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
-      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
-      "license": "ISC",
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true,
+      "license": "ISC"
     },
-    "node_modules/simple-git": {
-      "version": "3.28.0",
-      "resolved": "https://registry.npmjs.org/simple-git/-/simple-git-3.28.0.tgz",
-      "integrity": "sha512-Rs/vQRwsn1ILH1oBUy8NucJlXmnnLeLCfcvbSehkPzbv3wwoFWIdtfd6Ndo6ZPhlPsCZ60CPI4rxurnwAa+a2w==",
+    "node_modules/simple-swizzle": {
+      "version": "0.2.2",
+      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
+      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
       "license": "MIT",
       "dependencies": {
-        "@kwsites/file-exists": "^1.1.1",
-        "@kwsites/promise-deferred": "^1.1.1",
-        "debug": "^4.4.0"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/steveukx/git-js?sponsor=1"
+        "is-arrayish": "^0.3.1"
       }
     },
+    "node_modules/simple-swizzle/node_modules/is-arrayish": {
+      "version": "0.3.2",
+      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
+      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
+      "license": "MIT"
+    },
     "node_modules/sisteransi": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
@@ -7119,6 +5783,15 @@
       "dev": true,
       "license": "BSD-3-Clause"
     },
+    "node_modules/stack-trace": {
+      "version": "0.0.10",
+      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
+      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
     "node_modules/stack-utils": {
       "version": "2.0.6",
       "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
@@ -7142,21 +5815,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/stdin-discarder": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.1.0.tgz",
-      "integrity": "sha512-xhV7w8S+bUwlPTb4bAOUQhv8/cSS5offJuX8GQGq32ONF0ZtDWKfkdomM3HMRA+LhX6um/FZ0COqlwsjD53LeQ==",
-      "license": "MIT",
-      "dependencies": {
-        "bl": "^5.0.0"
-      },
-      "engines": {
-        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/string_decoder": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
@@ -7184,21 +5842,7 @@
       "version": "4.2.3",
       "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
       "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
-      "license": "MIT",
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/string-width-cjs": {
-      "name": "string-width",
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
-      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "emoji-regex": "^8.0.0",
@@ -7213,19 +5857,7 @@
       "version": "6.0.1",
       "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
       "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/strip-ansi-cjs": {
-      "name": "strip-ansi",
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ansi-regex": "^5.0.1"
@@ -7271,6 +5903,7 @@
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
       "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "has-flag": "^4.0.0"
@@ -7318,28 +5951,6 @@
         "concat-map": "0.0.1"
       }
     },
-    "node_modules/test-exclude/node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "deprecated": "Glob versions prior to v9 are no longer supported",
-      "dev": true,
-      "license": "ISC",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/test-exclude/node_modules/minimatch": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
@@ -7353,6 +5964,12 @@
         "node": "*"
       }
     },
+    "node_modules/text-hex": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
+      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==",
+      "license": "MIT"
+    },
     "node_modules/text-table": {
       "version": "0.2.0",
       "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
@@ -7360,18 +5977,6 @@
       "dev": true,
       "license": "MIT"
     },
-    "node_modules/tmp": {
-      "version": "0.0.33",
-      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
-      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
-      "license": "MIT",
-      "dependencies": {
-        "os-tmpdir": "~1.0.2"
-      },
-      "engines": {
-        "node": ">=0.6.0"
-      }
-    },
     "node_modules/tmpl": {
       "version": "1.0.5",
       "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
@@ -7392,6 +5997,21 @@
         "node": ">=8.0"
       }
     },
+    "node_modules/tr46": {
+      "version": "0.0.3",
+      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
+      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
+      "license": "MIT"
+    },
+    "node_modules/triple-beam": {
+      "version": "1.4.1",
+      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
+      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14.0.0"
+      }
+    },
     "node_modules/ts-api-utils": {
       "version": "1.4.3",
       "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.4.3.tgz",
@@ -7405,11 +6025,71 @@
         "typescript": ">=4.2.0"
       }
     },
-    "node_modules/tslib": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
-      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
-      "license": "0BSD"
+    "node_modules/ts-jest": {
+      "version": "29.4.1",
+      "resolved": "https://registry.npmjs.org/ts-jest/-/ts-jest-29.4.1.tgz",
+      "integrity": "sha512-SaeUtjfpg9Uqu8IbeDKtdaS0g8lS6FT6OzM3ezrDfErPJPHNDo/Ey+VFGP1bQIDfagYDLyRpd7O15XpG1Es2Uw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "bs-logger": "^0.2.6",
+        "fast-json-stable-stringify": "^2.1.0",
+        "handlebars": "^4.7.8",
+        "json5": "^2.2.3",
+        "lodash.memoize": "^4.1.2",
+        "make-error": "^1.3.6",
+        "semver": "^7.7.2",
+        "type-fest": "^4.41.0",
+        "yargs-parser": "^21.1.1"
+      },
+      "bin": {
+        "ts-jest": "cli.js"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || ^18.0.0 || >=20.0.0"
+      },
+      "peerDependencies": {
+        "@babel/core": ">=7.0.0-beta.0 <8",
+        "@jest/transform": "^29.0.0 || ^30.0.0",
+        "@jest/types": "^29.0.0 || ^30.0.0",
+        "babel-jest": "^29.0.0 || ^30.0.0",
+        "jest": "^29.0.0 || ^30.0.0",
+        "jest-util": "^29.0.0 || ^30.0.0",
+        "typescript": ">=4.3 <6"
+      },
+      "peerDependenciesMeta": {
+        "@babel/core": {
+          "optional": true
+        },
+        "@jest/transform": {
+          "optional": true
+        },
+        "@jest/types": {
+          "optional": true
+        },
+        "babel-jest": {
+          "optional": true
+        },
+        "esbuild": {
+          "optional": true
+        },
+        "jest-util": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/ts-jest/node_modules/type-fest": {
+      "version": "4.41.0",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-4.41.0.tgz",
+      "integrity": "sha512-TeTSQ6H5YHvpqVwBRcnLDCBnDOHWYu7IvGbHT6N8AOymcr9PJGjc1GTtiWZTYg0NCgYwvnYWEkVChQAr9bjfwA==",
+      "dev": true,
+      "license": "(MIT OR CC0-1.0)",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
     },
     "node_modules/tsx": {
       "version": "4.20.5",
@@ -7481,22 +6161,26 @@
         "node": ">=14.17"
       }
     },
+    "node_modules/uglify-js": {
+      "version": "3.19.3",
+      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.19.3.tgz",
+      "integrity": "sha512-v3Xu+yuwBXisp6QYTcH4UbH+xYJXqnq2m/LtQVWKWzYc1iehYnLixoQDN9FH6/j9/oybfd6W9Ghwkl8+UMKTKQ==",
+      "dev": true,
+      "license": "BSD-2-Clause",
+      "optional": true,
+      "bin": {
+        "uglifyjs": "bin/uglifyjs"
+      },
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
     "node_modules/undici-types": {
       "version": "6.21.0",
       "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
       "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
-      "dev": true,
       "license": "MIT"
     },
-    "node_modules/universalify": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
-      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">= 10.0.0"
-      }
-    },
     "node_modules/update-browserslist-db": {
       "version": "1.1.3",
       "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
@@ -7569,19 +6253,36 @@
         "makeerror": "1.0.12"
       }
     },
-    "node_modules/wcwidth": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
-      "integrity": "sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==",
+    "node_modules/web-streams-polyfill": {
+      "version": "4.0.0-beta.3",
+      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
+      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 14"
+      }
+    },
+    "node_modules/webidl-conversions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
+      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
+      "license": "BSD-2-Clause"
+    },
+    "node_modules/whatwg-url": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
+      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
       "license": "MIT",
       "dependencies": {
-        "defaults": "^1.0.3"
+        "tr46": "~0.0.3",
+        "webidl-conversions": "^3.0.0"
       }
     },
     "node_modules/which": {
       "version": "2.0.2",
       "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
       "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
       "license": "ISC",
       "dependencies": {
         "isexe": "^2.0.0"
@@ -7593,6 +6294,42 @@
         "node": ">= 8"
       }
     },
+    "node_modules/winston": {
+      "version": "3.17.0",
+      "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
+      "integrity": "sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==",
+      "license": "MIT",
+      "dependencies": {
+        "@colors/colors": "^1.6.0",
+        "@dabh/diagnostics": "^2.0.2",
+        "async": "^3.2.3",
+        "is-stream": "^2.0.0",
+        "logform": "^2.7.0",
+        "one-time": "^1.0.0",
+        "readable-stream": "^3.4.0",
+        "safe-stable-stringify": "^2.3.1",
+        "stack-trace": "0.0.x",
+        "triple-beam": "^1.3.0",
+        "winston-transport": "^4.9.0"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      }
+    },
+    "node_modules/winston-transport": {
+      "version": "4.9.0",
+      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.9.0.tgz",
+      "integrity": "sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==",
+      "license": "MIT",
+      "dependencies": {
+        "logform": "^2.7.0",
+        "readable-stream": "^3.6.2",
+        "triple-beam": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 12.0.0"
+      }
+    },
     "node_modules/word-wrap": {
       "version": "1.2.5",
       "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
@@ -7603,25 +6340,18 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/wrap-ansi": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
-      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
-      "license": "MIT",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
+    "node_modules/wordwrap": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
+      "integrity": "sha512-gvVzJFlPycKc5dZN4yPkP8w7Dc37BtP1yczEneOb4uq34pXZcvrtRTmWV8W+Ume+XCxKgbjM+nevkyFPMybd4Q==",
+      "dev": true,
+      "license": "MIT"
     },
-    "node_modules/wrap-ansi-cjs": {
-      "name": "wrap-ansi",
+    "node_modules/wrap-ansi": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
       "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
       "license": "MIT",
       "dependencies": {
         "ansi-styles": "^4.0.0",
@@ -7635,36 +6365,6 @@
         "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
-    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/wrap-ansi/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "license": "MIT",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
     "node_modules/wrappy": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
@@ -7686,13 +6386,6 @@
         "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
       }
     },
-    "node_modules/write-file-atomic/node_modules/signal-exit": {
-      "version": "3.0.7",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
-      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
-      "dev": true,
-      "license": "ISC"
-    },
     "node_modules/y18n": {
       "version": "5.0.8",
       "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
@@ -7710,18 +6403,6 @@
       "dev": true,
       "license": "ISC"
     },
-    "node_modules/yaml": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.1.tgz",
-      "integrity": "sha512-lcYcMxX2PO9XMGvAJkJ3OsNMw+/7FKes7/hgerGUYWIoWu5j/+YQqcZr5JnPZWzOsEBgMbSbiSTn/dv/69Mkpw==",
-      "license": "ISC",
-      "bin": {
-        "yaml": "bin.mjs"
-      },
-      "engines": {
-        "node": ">= 14.6"
-      }
-    },
     "node_modules/yargs": {
       "version": "17.7.2",
       "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
@@ -7764,18 +6445,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/yoctocolors-cjs": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.3.tgz",
-      "integrity": "sha512-U/PBtDf35ff0D8X8D0jfdzHYEPFxAI7jJlxZXwCSez5M3190m+QobIfh+sWDWSHMCWWJN2AWamkegn6vr6YBTw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=18"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
     "node_modules/zod": {
       "version": "3.25.76",
       "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
diff --git a/package.json b/package.json
index 5e9867b..7bd619d 100644
--- a/package.json
+++ b/package.json
@@ -1,50 +1,50 @@
 {
-  "name": "devrev-coder-agent",
-  "version": "1.0.0",
-  "description": "A multi-agent coding system for repository analysis and automated code changes",
+  "name": "multi-agent-coding-system-ts",
+  "version": "0.1.0",
+  "description": "TypeScript implementation of a multi-agent AI coding system",
   "main": "dist/index.js",
   "bin": {
-    "devrev-coder": "./dist/cli.js"
+    "terminal-agent": "dist/index.js"
   },
   "scripts": {
-    "build": "tsc",
-    "dev": "tsx watch src/cli.ts",
-    "start": "node dist/cli.js",
-    "lint": "eslint src/**/*.ts",
+    "build": "tsc && npm run copy-assets",
+    "copy-assets": "mkdir -p dist/agents/system-messages/md-files && cp -r src/agents/system-messages/md-files/* dist/agents/system-messages/md-files/",
+    "dev": "tsx src/index.ts",
     "test": "jest",
-    "clean": "rm -rf dist"
+    "test:watch": "jest --watch",
+    "lint": "eslint src/**/*.ts",
+    "format": "prettier --write src/**/*.ts",
+    "start": "node dist/index.js"
   },
-  "keywords": ["ai", "coding", "agent", "typescript", "automation"],
-  "author": "DevRev Coder Agent",
+  "keywords": [
+    "ai",
+    "multi-agent",
+    "coding",
+    "typescript",
+    "orchestrator"
+  ],
+  "author": "",
   "license": "MIT",
-  "dependencies": {
-    "chalk": "^5.3.0",
-    "commander": "^11.1.0",
-    "inquirer": "^9.2.12",
-    "ora": "^7.0.1",
-    "axios": "^1.6.2",
-    "dotenv": "^16.3.1",
-    "glob": "^10.3.10",
-    "ignore": "^5.3.0",
-    "simple-git": "^3.20.0",
-    "fs-extra": "^11.1.1",
-    "yaml": "^2.3.4",
-    "zod": "^3.22.4",
-    "nanoid": "^5.0.4"
-  },
   "devDependencies": {
-    "@types/node": "^20.10.0",
-    "@types/fs-extra": "^11.0.4",
-    "@types/inquirer": "^9.0.7",
-    "@typescript-eslint/eslint-plugin": "^6.13.1",
-    "@typescript-eslint/parser": "^6.13.1",
-    "eslint": "^8.54.0",
-    "jest": "^29.7.0",
-    "@types/jest": "^29.5.8",
-    "tsx": "^4.6.0",
-    "typescript": "^5.3.2"
+    "@types/jest": "^29.0.0",
+    "@types/js-yaml": "^4.0.0",
+    "@types/node": "^20.0.0",
+    "@typescript-eslint/eslint-plugin": "^6.0.0",
+    "@typescript-eslint/parser": "^6.0.0",
+    "eslint": "^8.0.0",
+    "jest": "^29.0.0",
+    "prettier": "^3.0.0",
+    "ts-jest": "^29.0.0",
+    "tsx": "^4.0.0",
+    "typescript": "^5.0.0"
   },
-  "engines": {
-    "node": ">=18.0.0"
+  "dependencies": {
+    "axios": "^1.6.0",
+    "commander": "^11.0.0",
+    "dotenv": "^17.2.2",
+    "js-yaml": "^4.1.0",
+    "openai": "^4.0.0",
+    "winston": "^3.11.0",
+    "zod": "^3.22.0"
   }
 }
diff --git a/src/agents/base-agent.ts b/src/agents/base-agent.ts
deleted file mode 100644
index 47873e4..0000000
--- a/src/agents/base-agent.ts
+++ /dev/null
@@ -1,170 +0,0 @@
-import { nanoid } from 'nanoid';
-import { Agent, AgentContext, AgentResult, Tool, ToolCall, LLMMessage } from '../types';
-import { OpenRouterClient } from '../core/llm-client';
-import { ConsoleLogger } from '../core/logger';
-
-export abstract class BaseAgent implements Agent {
-  public readonly id: string;
-  public abstract readonly name: string;
-  public abstract readonly description: string;
-  public abstract readonly capabilities: string[];
-
-  protected llmClient: OpenRouterClient;
-  protected logger: ConsoleLogger;
-
-  constructor(llmClient: OpenRouterClient, logger: ConsoleLogger) {
-    this.id = nanoid();
-    this.llmClient = llmClient;
-    this.logger = logger;
-  }
-
-  abstract execute(context: AgentContext): Promise<AgentResult>;
-
-  protected async callLLM(
-    messages: LLMMessage[], 
-    tools?: Tool[]
-  ): Promise<{ response: string; toolCalls?: ToolCall[] }> {
-    try {
-      if (tools && tools.length > 0) {
-        const toolSpecs = tools.map(tool => {
-          if ('toOpenAIToolSpec' in tool && typeof tool.toOpenAIToolSpec === 'function') {
-            return (tool as any).toOpenAIToolSpec();
-          }
-          return this.createToolSpec(tool);
-        });
-
-        const result = await this.llmClient.chatWithTools(messages, toolSpecs);
-        return {
-          response: result.response.content,
-          toolCalls: result.toolCalls
-        };
-      } else {
-        const result = await this.llmClient.chat(messages);
-        return { response: result.content };
-      }
-    } catch (error: any) {
-      this.logger.error(`LLM call failed: ${error.message}`);
-      throw error;
-    }
-  }
-
-  protected async executeTools(
-    toolCalls: ToolCall[], 
-    availableTools: Tool[], 
-    context: AgentContext
-  ): Promise<{ results: any[]; messages: LLMMessage[] }> {
-    const results: any[] = [];
-    const messages: LLMMessage[] = [];
-
-    for (const toolCall of toolCalls) {
-      const tool = availableTools.find(t => t.name === toolCall.name);
-      
-      if (!tool) {
-        const error = `Tool not found: ${toolCall.name}`;
-        this.logger.error(error);
-        results.push({ success: false, error });
-        messages.push({
-          role: 'system',
-          content: `Error: ${error}`
-        });
-        continue;
-      }
-
-      try {
-        this.logger.info(`Executing tool: ${tool.name}`);
-        
-        const toolContext = {
-          repositoryPath: context.repositoryPath,
-          config: context.config,
-          logger: this.logger
-        };
-
-        const result = await tool.execute(toolCall.parameters, toolContext);
-        results.push(result);
-
-        // Include structured tool result back into the conversation so LLM can act on it
-        messages.push({
-          role: 'system',
-          content: `TOOL_RESULT ${tool.name}: ${JSON.stringify({ success: result.success, message: result.message, error: result.error, data: result.data }, null, 2)}`
-        });
-
-        if (result.success) {
-          this.logger.info(`Tool ${tool.name} completed successfully`);
-        } else {
-          this.logger.warn(`Tool ${tool.name} failed: ${result.error}`);
-        }
-      } catch (error: any) {
-        const errorMsg = `Tool execution error: ${error.message}`;
-        this.logger.error(errorMsg);
-        results.push({ success: false, error: errorMsg });
-        messages.push({
-          role: 'system',
-          content: errorMsg
-        });
-      }
-    }
-
-    return { results, messages };
-  }
-
-  protected createSuccessResult(
-    message: string, 
-    data?: any, 
-    toolsUsed?: string[], 
-    nextActions?: string[]
-  ): AgentResult {
-    return {
-      success: true,
-      message,
-      data,
-      toolsUsed: toolsUsed || [],
-      nextActions: nextActions || []
-    };
-  }
-
-  protected createErrorResult(message: string, data?: any): AgentResult {
-    return {
-      success: false,
-      message,
-      data,
-      toolsUsed: [],
-      nextActions: []
-    };
-  }
-
-  private createToolSpec(tool: Tool): any {
-    return {
-      type: 'function',
-      function: {
-        name: tool.name,
-        description: tool.description,
-        parameters: {
-          type: 'object',
-          properties: {},
-          required: []
-        }
-      }
-    };
-  }
-
-  protected buildSystemPrompt(): string {
-    return `You are ${this.name}, ${this.description}
-    
-Your capabilities include:
-${this.capabilities.map(cap => `- ${cap}`).join('\n')}
-
-Guidelines:
-- Always analyze the request thoroughly before taking action
-- Use the available tools to gather information and make changes
-- Provide clear explanations of what you're doing and why
-- If you encounter errors, try alternative approaches
-- Always verify your changes when possible
-- Be proactive in suggesting improvements and next steps
-
-When using tools:
-- Choose the most appropriate tool for each task
-- Provide clear and specific parameters
-- Handle errors gracefully and explain what went wrong
-- Use multiple tools in sequence when needed to complete complex tasks`;
-  }
-}
diff --git a/src/agents/coding-agent.ts b/src/agents/coding-agent.ts
deleted file mode 100644
index 6d07d57..0000000
--- a/src/agents/coding-agent.ts
+++ /dev/null
@@ -1,414 +0,0 @@
-import { BaseAgent } from './base-agent';
-import { AgentContext, AgentResult, LLMMessage } from '../types';
-
-export class CodingAgent extends BaseAgent {
-  public readonly name = 'CodingAgent';
-  public readonly description = 'A specialized agent for writing, modifying, and analyzing code';
-  public readonly capabilities = [
-    'Write new code files',
-    'Modify existing code',
-    'Analyze code structure and quality',
-    'Refactor code for better maintainability',
-    'Fix bugs and issues',
-    'Add tests and documentation',
-    'Implement new features',
-    'Apply coding best practices'
-  ];
-
-  async execute(context: AgentContext): Promise<AgentResult> {
-    try {
-      this.logger.info('CodingAgent starting execution');
-      
-      const messages: LLMMessage[] = [
-        { role: 'system', content: this.buildSystemPrompt() },
-        { role: 'system', content: this.buildContextPrompt(context) },
-        { role: 'user', content: context.request }
-      ];
-
-      // Add conversation history
-      messages.push(...context.conversation);
-
-      let iterations = 0;
-      const maxIterations = 20; // headroom for complex tasks
-      const toolsUsed: string[] = [];
-      let editPerformed = false;
-
-      while (iterations < maxIterations) {
-        iterations++;
-        
-        const { response, toolCalls } = await this.callLLM(messages, context.availableTools);
-        
-        messages.push({ role: 'assistant', content: response });
-
-        if (!toolCalls || toolCalls.length === 0) {
-          // If request likely requires changes but no tools were called, push LLM to propose concrete edits
-          if (this.isChangeRequest(context.request) && !editPerformed && iterations < maxIterations) {
-            messages.push({
-              role: 'system',
-              content: 'You must propose concrete code edits now. Use search_files to find exact files, then apply_text_edits or write_file to implement XML prompt conversion.'
-            });
-            continue;
-          }
-
-          this.logger.info('CodingAgent completed successfully');
-          return this.createSuccessResult(
-            response,
-            { iterations, finalResponse: response },
-            toolsUsed,
-            this.extractNextActions(response)
-          );
-        }
-
-        // Execute tools
-        const { results, messages: toolMessages } = await this.executeTools(
-          toolCalls, 
-          context.availableTools, 
-          context
-        );
-
-        // Track tools used and whether edits occurred
-        toolCalls.forEach(call => {
-          if (!toolsUsed.includes(call.name)) {
-            toolsUsed.push(call.name);
-          }
-          if (['write_file', 'apply_text_edits', 'insert_text', 'refactor_code'].includes(call.name)) {
-            editPerformed = true;
-          }
-        });
-
-        // Add tool results to conversation
-        messages.push(...toolMessages);
-
-        // Check if we should continue based on tool results
-        const hasFailures = results.some(result => !result.success);
-        const hasProgress = results.some(result => result.success);
-        
-        // If we have some successful operations, continue
-        // If all operations failed and we've tried multiple times, break
-        if (hasFailures && !hasProgress && iterations > 3) {
-          break;
-        }
-      }
-
-      this.logger.warn('CodingAgent reached maximum iterations');
-      return this.createSuccessResult(
-        'Task completed with maximum iterations reached. Some operations may be incomplete.',
-        { iterations, maxReached: true },
-        toolsUsed
-      );
-    } catch (error: any) {
-      this.logger.error(`CodingAgent execution failed: ${error.message}`);
-      return this.createErrorResult(`Agent execution failed: ${error.message}`);
-    }
-  }
-
-  protected buildSystemPrompt(): string {
-    return `${super.buildSystemPrompt()}
-
-As a CodingAgent, you specialize in:
-
-Code Writing & Modification:
-- Write clean, well-structured, and maintainable code
-- Follow language-specific best practices and conventions
-- Add appropriate comments and documentation
-- Handle edge cases and error conditions
-
-Code Analysis:
-- Analyze existing code for structure, patterns, and quality
-- Identify potential issues, bugs, or improvements
-- Understand dependencies and relationships between files
-- Extract key information about functions, classes, and modules
-
-Problem Solving:
-- Break down complex coding tasks into manageable steps
-- Research and understand the codebase before making changes
-- Test and verify your changes when possible
-- Suggest improvements and optimizations
-
-Tool Usage:
-- Use read_file to understand existing code
-- Use analyze_code to get detailed code structure information
-- Use write_file to create or modify files
-- Use search_files to find relevant code patterns
-- Use git tools to track changes and maintain version control
-- Use refactor_code for safe code transformations
- - Use todo_create/todo_update/todo_list to manage TODOs for the task
-
-IMPORTANT: When asked to make code changes:
-1. First explore to understand the current structure
-2. Then ACTUALLY MODIFY the files using write_file tool
-3. Don't just analyze - TAKE ACTION to implement the requested changes
-4. After 2-3 exploration steps, start making concrete modifications
-
-TODO Process:
-- At the start, create a TODO list from the user's request (todo_create for each actionable item)
-- After each step, update the relevant TODO (todo_update status to in_progress/completed)
-- Keep TODOs up to date until the task finishes
-
-Always start by understanding the current codebase structure and requirements, then IMPLEMENT the changes.`;
-  }
-
-  private buildContextPrompt(context: AgentContext): string {
-    return `Repository Context:
-- Repository Path: ${context.repositoryPath}
-- Available Tools: ${context.availableTools.map(t => t.name).join(', ')}
-
-Current Request: ${context.request}
-
-EXECUTION PLAN:
-1. If this is a code modification request, first explore to understand the current structure
-2. Identify the specific files that need to be modified
-3. Read the relevant files to understand the current format
-4. IMPLEMENT the requested changes using write_file
-5. Verify the changes were applied correctly
-
-FILE ACCESS POLICY:
-- Before calling read_file, first use search_files to narrow down exact file paths
-- Prefer exact relative paths when reading files
-- Avoid broad reads; target only necessary files
-
-Please analyze the request, use the available tools to understand the codebase, MAKE THE NECESSARY CHANGES, and provide a clear summary of what was accomplished.`;
-  }
-
-  private extractNextActions(response: string): string[] {
-    const nextActions: string[] = [];
-    
-    // Look for common action patterns in the response
-    const actionPatterns = [
-      /need to (.*?)(?:\.|$)/gi,
-      /should (.*?)(?:\.|$)/gi,
-      /next step.*?is to (.*?)(?:\.|$)/gi,
-      /recommend (.*?)(?:\.|$)/gi,
-      /suggest (.*?)(?:\.|$)/gi
-    ];
-
-    actionPatterns.forEach(pattern => {
-      const matches = response.matchAll(pattern);
-      for (const match of matches) {
-        if (match[1] && match[1].length > 10) {
-          nextActions.push(match[1].trim());
-        }
-      }
-    });
-
-    return nextActions.slice(0, 3); // Limit to 3 next actions
-  }
-
-  private isChangeRequest(request: string): boolean {
-    const q = request.toLowerCase();
-    return [
-      'convert', 'rewrite', 'refactor', 'modify', 'update', 'change',
-      'implement', 'replace', 'transform'
-    ].some(k => q.includes(k));
-  }
-}
-
-export class AnalysisAgent extends BaseAgent {
-  public readonly name = 'AnalysisAgent';
-  public readonly description = 'A specialized agent for analyzing codebases and providing insights';
-  public readonly capabilities = [
-    'Analyze repository structure',
-    'Identify code patterns and architectures',
-    'Detect potential issues and improvements',
-    'Generate code documentation',
-    'Provide code quality metrics',
-    'Suggest refactoring opportunities',
-    'Identify security concerns',
-    'Analyze dependencies and relationships'
-  ];
-
-  async execute(context: AgentContext): Promise<AgentResult> {
-    try {
-      this.logger.info('AnalysisAgent starting execution');
-      
-      const messages: LLMMessage[] = [
-        { role: 'system', content: this.buildAnalysisPrompt() },
-        { role: 'user', content: context.request }
-      ];
-
-      const { response, toolCalls } = await this.callLLM(messages, context.availableTools);
-      const toolsUsed: string[] = [];
-
-      if (toolCalls && toolCalls.length > 0) {
-        const { results } = await this.executeTools(toolCalls, context.availableTools, context);
-        toolCalls.forEach(call => toolsUsed.push(call.name));
-
-        // Generate final analysis based on tool results
-        const analysisMessages: LLMMessage[] = [
-          ...messages,
-          { role: 'assistant', content: response },
-          { role: 'system', content: `Tool execution completed. Results: ${JSON.stringify(results, null, 2)}` },
-          { role: 'user', content: 'Please provide a comprehensive analysis based on the gathered data.' }
-        ];
-
-        const finalResponse = await this.llmClient.chat(analysisMessages);
-        
-        return this.createSuccessResult(
-          finalResponse.content,
-          { toolResults: results, analysis: finalResponse.content },
-          toolsUsed
-        );
-      }
-
-      return this.createSuccessResult(response, { analysis: response }, toolsUsed);
-    } catch (error: any) {
-      this.logger.error(`AnalysisAgent execution failed: ${error.message}`);
-      return this.createErrorResult(`Analysis failed: ${error.message}`);
-    }
-  }
-
-  private buildAnalysisPrompt(): string {
-    return `You are an expert code analysis agent. Your role is to thoroughly analyze codebases and provide valuable insights.
-
-Analysis Focus Areas:
-1. Repository Structure - Organization, architecture patterns, file structure
-2. Code Quality - Maintainability, readability, complexity, best practices
-3. Dependencies - External packages, internal module relationships
-4. Security - Potential vulnerabilities, security patterns
-5. Performance - Potential bottlenecks, optimization opportunities
-6. Testing - Test coverage, test quality, testing patterns
-7. Documentation - Code documentation, README quality, inline comments
-
-Available Tools for Analysis:
-- list_directory: Explore repository structure
-- read_file: Examine specific files
-- analyze_code: Get detailed code structure information
-- search_files: Find patterns across the codebase
-- git_status/git_log: Understand version control history
-
-Analysis Process:
-1. Start with repository structure overview
-2. Identify key files and entry points
-3. Analyze code patterns and architecture
-4. Look for potential issues and improvements
-5. Provide actionable recommendations
-
-Always provide specific, actionable insights with examples when possible.`;
-  }
-}
-
-export class PlanningAgent extends BaseAgent {
-  public readonly name = 'PlanningAgent';
-  public readonly description = 'A strategic agent focused on planning and breaking down complex tasks';
-  public readonly capabilities = [
-    'Break down complex tasks into steps',
-    'Analyze requirements and dependencies',
-    'Create implementation roadmaps',
-    'Estimate effort and complexity',
-    'Identify risks and challenges',
-    'Suggest optimal approaches',
-    'Coordinate multi-step workflows',
-    'Plan testing and validation strategies'
-  ];
-
-  async execute(context: AgentContext): Promise<AgentResult> {
-    try {
-      this.logger.info('PlanningAgent starting execution');
-      
-      // First, analyze the repository to understand the current state
-      const contextMessages: LLMMessage[] = [
-        { role: 'system', content: this.buildPlanningPrompt() },
-        { role: 'user', content: `Please analyze this repository and then create a detailed plan for: ${context.request}` }
-      ];
-
-      // Start with repository analysis
-      const analysisTools = context.availableTools.filter(tool => 
-        ['list_directory', 'git_status', 'search_files'].includes(tool.name)
-      );
-
-      const { response, toolCalls } = await this.callLLM(contextMessages, analysisTools);
-      const toolsUsed: string[] = [];
-
-      if (toolCalls && toolCalls.length > 0) {
-        const { results, messages: toolMessages } = await this.executeTools(
-          toolCalls, 
-          context.availableTools, 
-          context
-        );
-        
-        toolCalls.forEach(call => toolsUsed.push(call.name));
-        
-        // Create detailed plan based on analysis
-        const planningMessages: LLMMessage[] = [
-          ...contextMessages,
-          { role: 'assistant', content: response },
-          ...toolMessages,
-          { role: 'user', content: 'Now create a detailed, step-by-step implementation plan with priorities, dependencies, and estimated complexity.' }
-        ];
-
-        const planResponse = await this.llmClient.chat(planningMessages);
-        
-        return this.createSuccessResult(
-          planResponse.content,
-          { 
-            analysis: response, 
-            plan: planResponse.content,
-            toolResults: results 
-          },
-          toolsUsed,
-          this.extractPlanSteps(planResponse.content)
-        );
-      }
-
-      return this.createSuccessResult(response, { plan: response }, toolsUsed);
-    } catch (error: any) {
-      this.logger.error(`PlanningAgent execution failed: ${error.message}`);
-      return this.createErrorResult(`Planning failed: ${error.message}`);
-    }
-  }
-
-  private buildPlanningPrompt(): string {
-    return `You are an expert planning agent specialized in software development project planning.
-
-Planning Methodology:
-1. Requirements Analysis - Understand what needs to be built/changed
-2. Current State Assessment - Analyze existing codebase and constraints
-3. Gap Analysis - Identify what's missing or needs to be modified
-4. Task Decomposition - Break complex goals into manageable steps
-5. Dependency Mapping - Understand task relationships and prerequisites
-6. Risk Assessment - Identify potential challenges and mitigation strategies
-7. Resource Planning - Estimate effort and required skills
-
-Plan Structure:
-- Executive Summary
-- Requirements and Goals
-- Current State Analysis
-- Proposed Approach
-- Detailed Steps (with priorities and dependencies)
-- Risk Mitigation
-- Testing and Validation Strategy
-- Timeline Estimates
-
-For each step in the plan, include:
-- Clear description and acceptance criteria
-- Dependencies on other steps
-- Estimated complexity (Low/Medium/High)
-- Required tools and resources
-- Potential risks and mitigation approaches
-
-Focus on creating actionable, well-sequenced plans that can be executed by other agents.`;
-  }
-
-  private extractPlanSteps(planContent: string): string[] {
-    const steps: string[] = [];
-    
-    // Look for numbered or bulleted steps
-    const stepPatterns = [
-      /^\d+\.\s*(.+)$/gm,
-      /^-\s*(.+)$/gm,
-      /^\*\s*(.+)$/gm,
-      /^Step \d+:\s*(.+)$/gmi
-    ];
-
-    stepPatterns.forEach(pattern => {
-      const matches = planContent.matchAll(pattern);
-      for (const match of matches) {
-        if (match[1] && match[1].length > 20) {
-          steps.push(match[1].trim());
-        }
-      }
-    });
-
-    return steps.slice(0, 10); // Limit to 10 main steps
-  }
-}
diff --git a/src/agents/index.ts b/src/agents/index.ts
deleted file mode 100644
index 63f30ec..0000000
--- a/src/agents/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from './base-agent';
-export * from './coding-agent';
-export * from './orchestrator';
diff --git a/src/agents/orchestrator.ts b/src/agents/orchestrator.ts
deleted file mode 100644
index 5cb369e..0000000
--- a/src/agents/orchestrator.ts
+++ /dev/null
@@ -1,287 +0,0 @@
-import { Agent, AgentContext, AgentResult, Config, ConversationMessage } from '../types';
-import { ToolRegistry } from '../tools';
-import { OpenRouterClient } from '../core/llm-client';
-import { ConsoleLogger } from '../core/logger';
-import { RepositoryAnalyzer } from '../core/repository-analyzer';
-import { CodingAgent, AnalysisAgent, PlanningAgent } from './coding-agent';
-
-export class AgentOrchestrator {
-  private agents: Map<string, Agent> = new Map();
-  private toolRegistry: ToolRegistry;
-  private llmClient: OpenRouterClient;
-  private logger: ConsoleLogger;
-  private repositoryAnalyzer: RepositoryAnalyzer;
-  private config: Config;
-
-  constructor(config: Config, toolRegistry: ToolRegistry, llmClient: OpenRouterClient, logger: ConsoleLogger) {
-    this.config = config;
-    this.toolRegistry = toolRegistry;
-    this.llmClient = llmClient;
-    this.logger = logger;
-    this.repositoryAnalyzer = new RepositoryAnalyzer(logger);
-    
-    this.initializeAgents();
-  }
-
-  private initializeAgents(): void {
-    this.registerAgent(new CodingAgent(this.llmClient, this.logger));
-    this.registerAgent(new AnalysisAgent(this.llmClient, this.logger));
-    this.registerAgent(new PlanningAgent(this.llmClient, this.logger));
-  }
-
-  private registerAgent(agent: Agent): void {
-    this.agents.set(agent.name, agent);
-    this.logger.debug(`Registered agent: ${agent.name}`);
-  }
-
-  async executeRequest(
-    request: string, 
-    repositoryPath: string, 
-    conversationHistory: ConversationMessage[] = []
-  ): Promise<AgentResult> {
-    try {
-      this.logger.info('Starting request execution');
-      this.logger.highlight(`Request: ${request}`);
-      
-      // Analyze repository context
-      this.logger.info('Analyzing repository context...');
-      const repositoryContext = await this.repositoryAnalyzer.analyzeRepository(repositoryPath);
-      
-      // Determine the best agent for this request
-      const selectedAgent = await this.selectAgent(request, repositoryContext);
-      this.logger.info(`Selected agent: ${selectedAgent.name}`);
-
-      // Build agent context
-      const agentContext: AgentContext = {
-        request,
-        repositoryPath,
-        availableTools: this.toolRegistry.getAllTools(),
-        conversation: conversationHistory,
-        config: this.config
-      };
-
-      // Execute with the selected agent
-      this.logger.separator();
-      this.logger.highlight(`Executing with ${selectedAgent.name}`);
-      
-      const result = await selectedAgent.execute(agentContext);
-
-      // After execution, print TODO list if exists
-      try {
-        const { TodoManager } = await import('../core/todo-manager');
-        const tm = new TodoManager(repositoryPath);
-        const todos = await tm.list();
-        if (todos.length > 0) {
-          this.logger.info('Current TODOs:');
-          todos.forEach((t, i) => {
-            this.logger.info(`  ${i + 1}. [${t.status}] ${t.title} (${t.id})`);
-          });
-        }
-      } catch {}
-      
-      this.logger.separator();
-      if (result.success) {
-        this.logger.success(`Task completed successfully by ${selectedAgent.name}`);
-        if (result.toolsUsed && result.toolsUsed.length > 0) {
-          this.logger.info(`Tools used: ${result.toolsUsed.join(', ')}`);
-        }
-        if (result.nextActions && result.nextActions.length > 0) {
-          this.logger.info('Suggested next actions:');
-          result.nextActions.forEach((action, index) => {
-            this.logger.info(`  ${index + 1}. ${action}`);
-          });
-        }
-      } else {
-        this.logger.error(`Task failed: ${result.message}`);
-      }
-
-      return result;
-    } catch (error: any) {
-      this.logger.error(`Request execution failed: ${error.message}`);
-      return {
-        success: false,
-        message: `Orchestrator execution failed: ${error.message}`,
-        toolsUsed: [],
-        nextActions: []
-      };
-    }
-  }
-
-  async executeWithMultipleAgents(
-    request: string,
-    repositoryPath: string,
-    conversationHistory: ConversationMessage[] = []
-  ): Promise<AgentResult[]> {
-    try {
-      this.logger.info('Starting multi-agent execution');
-      
-      // Start with planning agent to break down the task
-      const planningAgent = this.agents.get('PlanningAgent')!;
-      const planningContext: AgentContext = {
-        request: `Create a detailed execution plan for: ${request}`,
-        repositoryPath,
-        availableTools: this.toolRegistry.getToolsByCategory('file').concat(
-          this.toolRegistry.getToolsByCategory('git')
-        ),
-        conversation: conversationHistory,
-        config: this.config
-      };
-
-      this.logger.highlight('Phase 1: Planning');
-      const planResult = await planningAgent.execute(planningContext);
-      
-      if (!planResult.success) {
-        return [planResult];
-      }
-
-      const results: AgentResult[] = [planResult];
-
-      // If the plan suggests specific next actions, execute them with appropriate agents
-      if (planResult.nextActions && planResult.nextActions.length > 0) {
-        this.logger.highlight('Phase 2: Execution');
-        
-        for (const action of planResult.nextActions.slice(0, 3)) { // Limit to 3 actions
-          const agentContext: AgentContext = {
-            request: action,
-            repositoryPath,
-            availableTools: this.toolRegistry.getAllTools(),
-            conversation: conversationHistory,
-            config: this.config
-          };
-
-          // Select appropriate agent for this action
-          const selectedAgent = await this.selectAgentForAction(action);
-          this.logger.info(`Executing action with ${selectedAgent.name}: ${action}`);
-          
-          const actionResult = await selectedAgent.execute(agentContext);
-          results.push(actionResult);
-
-          // Update conversation history with this result
-          conversationHistory.push({
-            role: 'assistant',
-            content: actionResult.message,
-            timestamp: new Date(),
-            metadata: { agent: selectedAgent.name, action }
-          });
-        }
-      }
-
-      return results;
-    } catch (error: any) {
-      this.logger.error(`Multi-agent execution failed: ${error.message}`);
-      return [{
-        success: false,
-        message: `Multi-agent execution failed: ${error.message}`,
-        toolsUsed: [],
-        nextActions: []
-      }];
-    }
-  }
-
-  private async selectAgent(request: string, repositoryContext: any): Promise<Agent> {
-    const requestLower = request.toLowerCase();
-    
-    // Simple rule-based agent selection (could be enhanced with LLM-based selection)
-    if (requestLower.includes('plan') || requestLower.includes('strategy') || 
-        requestLower.includes('roadmap') || requestLower.includes('approach')) {
-      return this.agents.get('PlanningAgent')!;
-    }
-    
-    if (requestLower.includes('analyze') || requestLower.includes('review') || 
-        requestLower.includes('audit') || requestLower.includes('assess')) {
-      return this.agents.get('AnalysisAgent')!;
-    }
-    
-    // Default to coding agent for implementation tasks
-    return this.agents.get('CodingAgent')!;
-  }
-
-  private async selectAgentForAction(action: string): Promise<Agent> {
-    const actionLower = action.toLowerCase();
-    
-    if (actionLower.includes('analyze') || actionLower.includes('review') || 
-        actionLower.includes('examine') || actionLower.includes('inspect')) {
-      return this.agents.get('AnalysisAgent')!;
-    }
-    
-    // Most actions will be implementation-focused
-    return this.agents.get('CodingAgent')!;
-  }
-
-  getAvailableAgents(): Agent[] {
-    return Array.from(this.agents.values());
-  }
-
-  getAgent(name: string): Agent | undefined {
-    return this.agents.get(name);
-  }
-
-  async getAgentRecommendation(request: string): Promise<{
-    recommended: Agent;
-    reasoning: string;
-    alternatives: Agent[];
-  }> {
-    try {
-      const agentDescriptions = Array.from(this.agents.values()).map(agent => ({
-        name: agent.name,
-        description: agent.description,
-        capabilities: agent.capabilities
-      }));
-
-      const prompt = `Given this request: "${request}"
-
-Available agents:
-${JSON.stringify(agentDescriptions, null, 2)}
-
-Please recommend the best agent and provide reasoning. Response should be JSON with:
-{
-  "recommended": "AgentName",
-  "reasoning": "explanation",
-  "alternatives": ["AlternateAgent1", "AlternateAgent2"]
-}`;
-
-      const messages = [{ role: 'user' as const, content: prompt }];
-      const recommendation = await this.llmClient.generateStructuredResponse<{
-        recommended: string;
-        reasoning: string;
-        alternatives: string[];
-      }>(
-        messages, 
-        {
-          type: 'object',
-          properties: {
-            recommended: { type: 'string' },
-            reasoning: { type: 'string' },
-            alternatives: { type: 'array', items: { type: 'string' } }
-          }
-        },
-        'Agent recommendation based on request analysis'
-      );
-
-      const recommendedAgent = this.agents.get(recommendation.recommended);
-      if (!recommendedAgent) {
-        throw new Error(`Recommended agent ${recommendation.recommended} not found`);
-      }
-
-      const alternatives = recommendation.alternatives
-        .map((name: string) => this.agents.get(name))
-        .filter(Boolean) as Agent[];
-
-      return {
-        recommended: recommendedAgent,
-        reasoning: recommendation.reasoning,
-        alternatives
-      };
-    } catch (error: any) {
-      this.logger.error(`Failed to get agent recommendation: ${error.message}`);
-      
-      // Fallback to rule-based selection
-      const selected = await this.selectAgent(request, {});
-      return {
-        recommended: selected,
-        reasoning: 'Fallback selection due to recommendation error',
-        alternatives: Array.from(this.agents.values()).filter(a => a !== selected)
-      };
-    }
-  }
-}
diff --git a/src/cli.ts b/src/cli.ts
deleted file mode 100644
index 1c6b2a3..0000000
--- a/src/cli.ts
+++ /dev/null
@@ -1,58 +0,0 @@
-#!/usr/bin/env node
-
-import { DevRevCoderCLI } from './cli/commands';
-import chalk from 'chalk';
-
-async function main() {
-  try {
-    // Display banner
-    console.log(chalk.blue.bold(`
-    ██████╗ ███████╗██╗   ██╗██████╗ ███████╗██╗   ██╗
-    ██╔══██╗██╔════╝██║   ██║██╔══██╗██╔════╝██║   ██║
-    ██║  ██║█████╗  ██║   ██║██████╔╝█████╗  ██║   ██║
-    ██║  ██║██╔══╝  ╚██╗ ██╔╝██╔══██╗██╔══╝  ╚██╗ ██╔╝
-    ██████╔╝███████╗ ╚████╔╝ ██║  ██║███████╗ ╚████╔╝
-    ╚═════╝ ╚══════╝  ╚═══╝  ╚═╝  ╚═╝╚══════╝  ╚═══╝
-    
-    ╔═══════════════════════════════════════════════════╗
-    ║        🤖 CODER AGENT - AI Development Assistant   ║
-    ║              Multi-Agent Coding System           ║
-    ╚═══════════════════════════════════════════════════╝
-    `));
-
-    const cli = new DevRevCoderCLI();
-    const program = cli.createProgram();
-    
-    await program.parseAsync(process.argv);
-  } catch (error: any) {
-    console.error(chalk.red(`\n❌ Error: ${error.message}\n`));
-    
-    // Show helpful error messages
-    if (error.message.includes('OPENROUTER_API_KEY')) {
-      console.log(chalk.yellow('💡 Tip: Run `devrev-coder config --init` to set up your configuration.'));
-    }
-    
-    process.exit(1);
-  }
-}
-
-// Handle uncaught errors gracefully
-process.on('uncaughtException', (error) => {
-  console.error(chalk.red('\n❌ Uncaught Exception:'), error.message);
-  process.exit(1);
-});
-
-process.on('unhandledRejection', (reason, promise) => {
-  console.error(chalk.red('\n❌ Unhandled Rejection at:'), promise, chalk.red('reason:'), reason);
-  process.exit(1);
-});
-
-// Handle SIGINT (Ctrl+C) gracefully
-process.on('SIGINT', () => {
-  console.log(chalk.yellow('\n\n👋 Goodbye!\n'));
-  process.exit(0);
-});
-
-if (require.main === module) {
-  main();
-}
diff --git a/src/cli/commands.ts b/src/cli/commands.ts
deleted file mode 100644
index 8b46ced..0000000
--- a/src/cli/commands.ts
+++ /dev/null
@@ -1,406 +0,0 @@
-import { Command } from 'commander';
-import chalk from 'chalk';
-import inquirer from 'inquirer';
-import ora from 'ora';
-import { ConfigManager } from '../core/config';
-import { ConsoleLogger } from '../core/logger';
-import { OpenRouterClient } from '../core/llm-client';
-import { ToolRegistry } from '../tools';
-import { AgentOrchestrator } from '../agents/orchestrator';
-import * as fs from 'fs-extra';
-import * as path from 'path';
-
-export class DevRevCoderCLI {
-  private config = ConfigManager.getInstance().getConfig();
-  private logger = new ConsoleLogger(this.config);
-  private toolRegistry = new ToolRegistry();
-  private llmClient?: OpenRouterClient;
-  private orchestrator?: AgentOrchestrator;
-
-  private ensureOrchestrator(): AgentOrchestrator {
-    if (!this.orchestrator) {
-      this.llmClient = new OpenRouterClient(this.config, this.logger);
-      this.orchestrator = new AgentOrchestrator(this.config, this.toolRegistry, this.llmClient, this.logger);
-    }
-    return this.orchestrator;
-  }
-
-  createProgram(): Command {
-    const program = new Command();
-
-    program
-      .name('devrev-coder')
-      .description('DevRev Coder Agent - AI-powered multi-agent coding system')
-      .version('1.0.0');
-
-    // Main command - interactive mode
-    program
-      .command('chat')
-      .alias('c')
-      .description('Start interactive chat with the coding agents')
-      .option('-r, --repository <path>', 'Repository path', process.cwd())
-      .option('-a, --agent <name>', 'Specific agent to use (CodingAgent, AnalysisAgent, PlanningAgent)')
-      .option('-m, --multi-agent', 'Use multi-agent mode for complex tasks')
-      .action(async (options) => {
-        await this.handleChatCommand(options);
-      });
-
-    // One-shot command
-    program
-      .command('exec <request>')
-      .alias('e')
-      .description('Execute a single request')
-      .option('-r, --repository <path>', 'Repository path', process.cwd())
-      .option('-a, --agent <name>', 'Specific agent to use')
-      .option('-m, --multi-agent', 'Use multi-agent mode')
-      .option('-v, --verbose', 'Verbose output')
-      .action(async (request, options) => {
-        await this.handleExecCommand(request, options);
-      });
-
-    // Repository analysis
-    program
-      .command('analyze [path]')
-      .description('Analyze repository structure and provide insights')
-      .option('-d, --depth <number>', 'Analysis depth', '3')
-      .option('-o, --output <format>', 'Output format (json|table|summary)', 'summary')
-      .action(async (repositoryPath, options) => {
-        await this.handleAnalyzeCommand(repositoryPath || process.cwd(), options);
-      });
-
-    // Agent management
-    program
-      .command('agents')
-      .description('List available agents and their capabilities')
-      .action(async () => {
-        await this.handleAgentsCommand();
-      });
-
-    // Tool management
-    program
-      .command('tools')
-      .description('List available tools')
-      .option('-c, --category <type>', 'Filter by category (file|git|code|analysis)')
-      .action(async (options) => {
-        await this.handleToolsCommand(options);
-      });
-
-    // Configuration
-    program
-      .command('config')
-      .description('Manage configuration')
-      .option('-s, --show', 'Show current configuration')
-      .option('-i, --init', 'Initialize configuration')
-      .action(async (options) => {
-        await this.handleConfigCommand(options);
-      });
-
-    return program;
-  }
-
-  private async handleChatCommand(options: any): Promise<void> {
-    console.log(chalk.blue.bold('\n🤖 DevRev Coder Agent - Interactive Mode\n'));
-    
-    const repositoryPath = path.resolve(options.repository);
-    if (!(await fs.pathExists(repositoryPath))) {
-      this.logger.error('Repository path does not exist');
-      return;
-    }
-
-    this.logger.info(`Repository: ${repositoryPath}`);
-    
-    // Show available agents
-    if (!options.agent) {
-      const agents = this.ensureOrchestrator().getAvailableAgents();
-      console.log(chalk.cyan('\nAvailable Agents:'));
-      agents.forEach((agent, index) => {
-        console.log(chalk.white(`  ${index + 1}. ${chalk.bold(agent.name)} - ${agent.description}`));
-      });
-      console.log(chalk.gray('\nYou can specify an agent with -a flag, or let the system choose automatically.\n'));
-    }
-
-    const conversationHistory: any[] = [];
-
-    while (true) {
-      try {
-        const { request } = await inquirer.prompt([
-          {
-            type: 'input',
-            name: 'request',
-            message: chalk.green('What would you like me to help you with?'),
-            validate: (input) => input.trim().length > 0 || 'Please enter a request'
-          }
-        ]);
-
-        if (request.toLowerCase() === 'exit' || request.toLowerCase() === 'quit') {
-          console.log(chalk.yellow('\n👋 Goodbye!\n'));
-          break;
-        }
-
-        if (request.toLowerCase() === 'clear') {
-          console.clear();
-          conversationHistory.length = 0;
-          continue;
-        }
-
-        const spinner = ora('Processing your request...').start();
-
-        try {
-          let result;
-          if (options.multiAgent) {
-            spinner.text = 'Executing with multiple agents...';
-            const results = await this.ensureOrchestrator().executeWithMultipleAgents(
-              request, 
-              repositoryPath, 
-              conversationHistory
-            );
-            result = results[results.length - 1]; // Show the final result
-          } else {
-            result = await this.ensureOrchestrator().executeRequest(
-              request, 
-              repositoryPath, 
-              conversationHistory
-            );
-          }
-
-          spinner.stop();
-          console.log('\n' + chalk.gray('─'.repeat(60)));
-          
-          if (result.success) {
-            console.log(chalk.green('✅ Success\n'));
-            console.log(result.message);
-          } else {
-            console.log(chalk.red('❌ Failed\n'));
-            console.log(result.message);
-          }
-
-          // Update conversation history
-          conversationHistory.push({
-            role: 'user',
-            content: request,
-            timestamp: new Date()
-          });
-          conversationHistory.push({
-            role: 'assistant',
-            content: result.message,
-            timestamp: new Date()
-          });
-
-          console.log('\n');
-        } catch (error: any) {
-          spinner.stop();
-          this.logger.error(`Request failed: ${error.message}`);
-        }
-      } catch (error: any) {
-        if (error.message.includes('User force closed')) {
-          console.log(chalk.yellow('\n\n👋 Goodbye!\n'));
-          break;
-        }
-        this.logger.error(`Error: ${error.message}`);
-      }
-    }
-  }
-
-  private async handleExecCommand(request: string, options: any): Promise<void> {
-    const repositoryPath = path.resolve(options.repository);
-    
-    if (!(await fs.pathExists(repositoryPath))) {
-      this.logger.error('Repository path does not exist');
-      process.exit(1);
-    }
-
-    if (options.verbose) {
-      console.log(chalk.blue.bold('\n🤖 DevRev Coder Agent - Execution Mode\n'));
-      this.logger.info(`Repository: ${repositoryPath}`);
-      this.logger.info(`Request: ${request}`);
-    }
-
-    const spinner = ora('Processing request...').start();
-
-    try {
-      let result;
-      if (options.multiAgent) {
-        spinner.text = 'Executing with multiple agents...';
-        const results = await this.ensureOrchestrator().executeWithMultipleAgents(request, repositoryPath);
-        result = results[results.length - 1];
-      } else {
-        result = await this.ensureOrchestrator().executeRequest(request, repositoryPath);
-      }
-
-      spinner.stop();
-
-      if (result.success) {
-        if (options.verbose) {
-          console.log(chalk.green('\n✅ Success\n'));
-        }
-        console.log(result.message);
-        process.exit(0);
-      } else {
-        if (options.verbose) {
-          console.log(chalk.red('\n❌ Failed\n'));
-        }
-        console.error(result.message);
-        process.exit(1);
-      }
-    } catch (error: any) {
-      spinner.stop();
-      console.error(chalk.red(`Error: ${error.message}`));
-      process.exit(1);
-    }
-  }
-
-  private async handleAnalyzeCommand(repositoryPath: string, options: any): Promise<void> {
-    const fullPath = path.resolve(repositoryPath);
-    
-    if (!(await fs.pathExists(fullPath))) {
-      this.logger.error('Repository path does not exist');
-      return;
-    }
-
-    const spinner = ora('Analyzing repository...').start();
-
-    try {
-      const result = await this.ensureOrchestrator().executeRequest(
-        'Analyze this repository structure, technologies, and provide insights',
-        fullPath
-      );
-
-      spinner.stop();
-
-      if (options.output === 'json') {
-        console.log(JSON.stringify(result, null, 2));
-      } else if (options.output === 'table') {
-        // Format as table - simplified for now
-        console.log(chalk.blue.bold('\n📊 Repository Analysis\n'));
-        console.log(result.message);
-      } else {
-        console.log(chalk.blue.bold('\n📊 Repository Analysis\n'));
-        console.log(result.message);
-      }
-    } catch (error: any) {
-      spinner.stop();
-      this.logger.error(`Analysis failed: ${error.message}`);
-    }
-  }
-
-  private async handleAgentsCommand(): Promise<void> {
-    console.log(chalk.blue.bold('\n🤖 Available Agents\n'));
-    
-    const agents = this.ensureOrchestrator().getAvailableAgents();
-    
-    agents.forEach((agent, index) => {
-      console.log(chalk.cyan.bold(`${index + 1}. ${agent.name}`));
-      console.log(chalk.white(`   ${agent.description}\n`));
-      
-      console.log(chalk.gray('   Capabilities:'));
-      agent.capabilities.forEach(capability => {
-        console.log(chalk.gray(`   • ${capability}`));
-      });
-      console.log();
-    });
-  }
-
-  private async handleToolsCommand(options: any): Promise<void> {
-    console.log(chalk.blue.bold('\n🔧 Available Tools\n'));
-    
-    let tools;
-    if (options.category) {
-      tools = this.toolRegistry.getToolsByCategory(options.category as any);
-      console.log(chalk.cyan(`Category: ${options.category.toUpperCase()}\n`));
-    } else {
-      tools = this.toolRegistry.getAllTools();
-    }
-    
-    if (tools.length === 0) {
-      console.log(chalk.yellow('No tools found for the specified category.'));
-      return;
-    }
-
-    // Group tools by category for better display
-    const grouped: Record<string, any[]> = {
-      'File Operations': [],
-      'Git Operations': [],
-      'Code Analysis': [],
-      'Other': []
-    };
-
-    tools.forEach(tool => {
-      if (tool.name.startsWith('read_file') || tool.name.startsWith('write_file') || 
-          tool.name.startsWith('list_directory') || tool.name.startsWith('search_files')) {
-        grouped['File Operations'].push(tool);
-      } else if (tool.name.startsWith('git_')) {
-        grouped['Git Operations'].push(tool);
-      } else if (tool.name.includes('analyze') || tool.name.includes('refactor')) {
-        grouped['Code Analysis'].push(tool);
-      } else {
-        grouped['Other'].push(tool);
-      }
-    });
-
-    Object.entries(grouped).forEach(([category, categoryTools]) => {
-      if (categoryTools.length === 0) return;
-      
-      console.log(chalk.magenta.bold(category));
-      categoryTools.forEach(tool => {
-        console.log(chalk.white(`  • ${chalk.bold(tool.name)} - ${tool.description}`));
-      });
-      console.log();
-    });
-  }
-
-  private async handleConfigCommand(options: any): Promise<void> {
-    if (options.show) {
-      console.log(chalk.blue.bold('\n⚙️  Current Configuration\n'));
-      const config = ConfigManager.getInstance().getConfig();
-      
-      // Display config without sensitive data
-      const displayConfig = {
-        ...config,
-        openRouter: {
-          ...config.openRouter,
-          apiKey: config.openRouter.apiKey ? '***masked***' : 'not set'
-        }
-      };
-      
-      console.log(JSON.stringify(displayConfig, null, 2));
-      return;
-    }
-
-    if (options.init) {
-      console.log(chalk.blue.bold('\n⚙️  Configuration Setup\n'));
-      
-      const template = ConfigManager.getInstance().createEnvTemplate();
-      const envPath = path.join(process.cwd(), '.env');
-      
-      if (await fs.pathExists(envPath)) {
-        const { overwrite } = await inquirer.prompt([
-          {
-            type: 'confirm',
-            name: 'overwrite',
-            message: '.env file already exists. Overwrite?',
-            default: false
-          }
-        ]);
-        
-        if (!overwrite) {
-          console.log(chalk.yellow('Configuration initialization cancelled.'));
-          return;
-        }
-      }
-
-      try {
-        await fs.writeFile(envPath, template);
-        console.log(chalk.green(`✅ Created .env file at ${envPath}`));
-        console.log(chalk.yellow('\n⚠️  Please edit the .env file and add your OpenRouter API key.'));
-      } catch (error: any) {
-        this.logger.error(`Failed to create .env file: ${error.message}`);
-      }
-      return;
-    }
-
-    // Default: show help
-    console.log(chalk.blue.bold('\n⚙️  Configuration Commands\n'));
-    console.log(chalk.white('  --show    Show current configuration'));
-    console.log(chalk.white('  --init    Initialize .env configuration file'));
-  }
-}
diff --git a/src/core/config.ts b/src/core/config.ts
deleted file mode 100644
index ad3f45f..0000000
--- a/src/core/config.ts
+++ /dev/null
@@ -1,91 +0,0 @@
-import { Config, ConfigSchema } from '../types';
-import * as dotenv from 'dotenv';
-import * as path from 'path';
-import * as fs from 'fs';
-
-export class ConfigManager {
-  private static instance: ConfigManager;
-  private config!: Config;
-
-  private constructor() {
-    this.loadConfig();
-  }
-
-  public static getInstance(): ConfigManager {
-    if (!ConfigManager.instance) {
-      ConfigManager.instance = new ConfigManager();
-    }
-    return ConfigManager.instance;
-  }
-
-  private loadConfig(): void {
-    // Try to load .env file if it exists
-    const envPath = path.join(process.cwd(), '.env');
-    if (fs.existsSync(envPath)) {
-      dotenv.config({ path: envPath });
-    }
-
-    // Build config from environment variables with defaults
-    const configData = {
-      openRouter: {
-        apiKey: process.env.OPENROUTER_API_KEY || '',
-        model: process.env.OPENROUTER_MODEL || 'google/gemini-2.0-flash-experimental',
-        baseUrl: process.env.OPENROUTER_BASE_URL || 'https://openrouter.ai/api/v1'
-      },
-      agent: {
-        maxConcurrentAgents: parseInt(process.env.MAX_CONCURRENT_AGENTS || '3'),
-        maxContextLength: parseInt(process.env.MAX_CONTEXT_LENGTH || '100000'),
-        temperature: parseFloat(process.env.TEMPERATURE || '0.1')
-      },
-      tools: {
-        maxFileSizeKB: parseInt(process.env.MAX_FILE_SIZE_KB || '500'),
-        enableGitOperations: process.env.ENABLE_GIT_OPERATIONS !== 'false',
-        enableFileOperations: process.env.ENABLE_FILE_OPERATIONS !== 'false'
-      },
-      logging: {
-        level: (process.env.LOG_LEVEL as any) || 'info',
-        logToFile: process.env.LOG_TO_FILE === 'true'
-      }
-    };
-
-    // Validate and parse config
-    const result = ConfigSchema.safeParse(configData);
-    if (!result.success) {
-      console.error('Invalid configuration:', result.error.format());
-      process.exit(1);
-    }
-
-    this.config = result.data;
-  }
-
-  public getConfig(): Config {
-    return this.config;
-  }
-
-  public updateConfig(updates: Partial<Config>): void {
-    this.config = { ...this.config, ...updates };
-  }
-
-  public createEnvTemplate(): string {
-    return `# DevRev Coder Agent Configuration
-
-# OpenRouter Configuration (Required)
-OPENROUTER_API_KEY=your_openrouter_api_key_here
-OPENROUTER_MODEL=google/gemini-2.0-flash-experimental
-OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
-
-# Agent Configuration
-MAX_CONCURRENT_AGENTS=3
-MAX_CONTEXT_LENGTH=100000
-TEMPERATURE=0.1
-
-# Tool Configuration
-MAX_FILE_SIZE_KB=500
-ENABLE_GIT_OPERATIONS=true
-ENABLE_FILE_OPERATIONS=true
-
-# Logging
-LOG_LEVEL=info
-LOG_TO_FILE=false`;
-  }
-}
diff --git a/src/core/llm-client.ts b/src/core/llm-client.ts
deleted file mode 100644
index 3aa090c..0000000
--- a/src/core/llm-client.ts
+++ /dev/null
@@ -1,152 +0,0 @@
-import axios, { AxiosInstance } from 'axios';
-import { Config, LLMMessage, LLMResponse, ToolCall } from '../types';
-import { ConsoleLogger } from './logger';
-
-export class OpenRouterClient {
-  private client: AxiosInstance;
-  private config: Config;
-  private logger: ConsoleLogger;
-
-  constructor(config: Config, logger: ConsoleLogger) {
-    this.config = config;
-    this.logger = logger;
-    
-    if (!config.openRouter.apiKey) {
-      throw new Error('OPENROUTER_API_KEY is required. Please set it in your .env file or environment variables.');
-    }
-    
-    this.client = axios.create({
-      baseURL: config.openRouter.baseUrl,
-      headers: {
-        'Authorization': `Bearer ${config.openRouter.apiKey}`,
-        'Content-Type': 'application/json',
-        'HTTP-Referer': 'https://github.com/devrev/coder-agent',
-        'X-Title': 'DevRev Coder Agent'
-      }
-    });
-  }
-
-  async chat(messages: LLMMessage[]): Promise<LLMResponse> {
-    try {
-      this.logger.debug(`Sending ${messages.length} messages to LLM`);
-      
-      const response = await this.client.post('/chat/completions', {
-        model: this.config.openRouter.model,
-        messages,
-        temperature: this.config.agent.temperature,
-        max_tokens: 4000,
-        stream: false
-      });
-
-      const result = response.data;
-      const content = result.choices?.[0]?.message?.content || '';
-      
-      this.logger.debug('Received LLM response', {
-        model: result.model,
-        usage: result.usage
-      });
-
-      return {
-        content,
-        usage: result.usage ? {
-          promptTokens: result.usage.prompt_tokens,
-          completionTokens: result.usage.completion_tokens,
-          totalTokens: result.usage.total_tokens
-        } : undefined
-      };
-    } catch (error: any) {
-      this.logger.error('LLM request failed:', error.message);
-      throw new Error(`LLM request failed: ${error.message}`);
-    }
-  }
-
-  async chatWithTools(messages: LLMMessage[], tools: any[]): Promise<{
-    response: LLMResponse;
-    toolCalls?: ToolCall[];
-  }> {
-    try {
-      this.logger.debug(`Sending ${messages.length} messages with ${tools.length} tools`);
-      
-      const response = await this.client.post('/chat/completions', {
-        model: this.config.openRouter.model,
-        messages,
-        tools,
-        tool_choice: 'auto',
-        temperature: this.config.agent.temperature,
-        max_tokens: 4000,
-        stream: false
-      });
-
-      const result = response.data;
-      const choice = result.choices?.[0];
-      const message = choice?.message;
-      
-      const llmResponse: LLMResponse = {
-        content: message?.content || '',
-        usage: result.usage ? {
-          promptTokens: result.usage.prompt_tokens,
-          completionTokens: result.usage.completion_tokens,
-          totalTokens: result.usage.total_tokens
-        } : undefined
-      };
-
-      let toolCalls: ToolCall[] | undefined;
-      if (message?.tool_calls) {
-        toolCalls = message.tool_calls.map((call: any) => ({
-          name: call.function.name,
-          parameters: JSON.parse(call.function.arguments)
-        }));
-      }
-
-      this.logger.debug('Received LLM response with tools', {
-        model: result.model,
-        usage: result.usage,
-        toolCallsCount: toolCalls?.length || 0
-      });
-
-      return { response: llmResponse, toolCalls };
-    } catch (error: any) {
-      this.logger.error('LLM request with tools failed:', error.message);
-      throw new Error(`LLM request with tools failed: ${error.message}`);
-    }
-  }
-
-  async generateStructuredResponse<T>(
-    messages: LLMMessage[], 
-    schema: any,
-    description: string
-  ): Promise<T> {
-    try {
-      const structuredPrompt = `Please respond with a JSON object that matches this schema:
-${JSON.stringify(schema, null, 2)}
-
-Description: ${description}
-
-Respond only with valid JSON matching this schema.`;
-
-      const structuredMessages = [
-        ...messages,
-        { role: 'system' as const, content: structuredPrompt }
-      ];
-
-      const response = await this.chat(structuredMessages);
-      
-      // Try to parse JSON from response
-      const jsonMatch = response.content.match(/```json\n([\s\S]*?)\n```/) ||
-                        response.content.match(/\{[\s\S]*\}/);
-      
-      if (!jsonMatch) {
-        throw new Error('No JSON found in response');
-      }
-
-      const jsonStr = jsonMatch[1] || jsonMatch[0];
-      const parsed = JSON.parse(jsonStr);
-      
-      this.logger.debug('Generated structured response', { schema: typeof parsed });
-      return parsed;
-    } catch (error: any) {
-      this.logger.error('Failed to generate structured response:', error.message);
-      throw new Error(`Failed to generate structured response: ${error.message}`);
-    }
-  }
-}
diff --git a/src/core/logger.ts b/src/core/logger.ts
deleted file mode 100644
index 2995cc8..0000000
--- a/src/core/logger.ts
+++ /dev/null
@@ -1,98 +0,0 @@
-import chalk from 'chalk';
-import { Logger, Config } from '../types';
-import * as fs from 'fs';
-import * as path from 'path';
-
-export class ConsoleLogger implements Logger {
-  private config: Config;
-  private logFile?: string;
-
-  constructor(config: Config) {
-    this.config = config;
-    if (config.logging.logToFile) {
-      this.logFile = path.join(process.cwd(), 'devrev-coder.log');
-    }
-  }
-
-  private writeToFile(level: string, message: string, ...args: any[]): void {
-    if (!this.logFile) return;
-
-    const timestamp = new Date().toISOString();
-    const logLine = `[${timestamp}] [${level.toUpperCase()}] ${message} ${args.length > 0 ? JSON.stringify(args) : ''}\n`;
-    
-    fs.appendFileSync(this.logFile, logLine);
-  }
-
-  private shouldLog(level: string): boolean {
-    const levels = ['debug', 'info', 'warn', 'error'];
-    const currentLevelIndex = levels.indexOf(this.config.logging.level);
-    const messageLevelIndex = levels.indexOf(level);
-    return messageLevelIndex >= currentLevelIndex;
-  }
-
-  debug(message: string, ...args: any[]): void {
-    if (!this.shouldLog('debug')) return;
-    
-    console.log(chalk.gray(`🔍 [DEBUG] ${message}`), ...args);
-    this.writeToFile('debug', message, ...args);
-  }
-
-  info(message: string, ...args: any[]): void {
-    if (!this.shouldLog('info')) return;
-    
-    console.log(chalk.blue(`ℹ️  [INFO] ${message}`), ...args);
-    this.writeToFile('info', message, ...args);
-  }
-
-  warn(message: string, ...args: any[]): void {
-    if (!this.shouldLog('warn')) return;
-    
-    console.log(chalk.yellow(`⚠️  [WARN] ${message}`), ...args);
-    this.writeToFile('warn', message, ...args);
-  }
-
-  error(message: string, ...args: any[]): void {
-    if (!this.shouldLog('error')) return;
-    
-    console.error(chalk.red(`❌ [ERROR] ${message}`), ...args);
-    this.writeToFile('error', message, ...args);
-  }
-
-  success(message: string, ...args: any[]): void {
-    console.log(chalk.green(`✅ ${message}`), ...args);
-    this.writeToFile('info', `SUCCESS: ${message}`, ...args);
-  }
-
-  highlight(message: string, ...args: any[]): void {
-    console.log(chalk.cyan.bold(`🌟 ${message}`), ...args);
-    this.writeToFile('info', `HIGHLIGHT: ${message}`, ...args);
-  }
-
-  separator(): void {
-    console.log(chalk.gray('─'.repeat(60)));
-  }
-
-  table(data: Record<string, any>[]): void {
-    if (data.length === 0) return;
-    
-    const headers = Object.keys(data[0]);
-    const colWidths = headers.map(header => 
-      Math.max(header.length, ...data.map(row => String(row[header] || '').length))
-    );
-
-    // Header
-    const headerRow = headers.map((header, i) => 
-      header.padEnd(colWidths[i])
-    ).join(' | ');
-    console.log(chalk.bold(headerRow));
-    console.log(chalk.gray('─'.repeat(headerRow.length)));
-
-    // Data rows
-    data.forEach(row => {
-      const dataRow = headers.map((header, i) => 
-        String(row[header] || '').padEnd(colWidths[i])
-      ).join(' | ');
-      console.log(dataRow);
-    });
-  }
-}
diff --git a/src/core/repository-analyzer.ts b/src/core/repository-analyzer.ts
deleted file mode 100644
index 613a95c..0000000
--- a/src/core/repository-analyzer.ts
+++ /dev/null
@@ -1,325 +0,0 @@
-import * as fs from 'fs-extra';
-import * as path from 'path';
-import { glob } from 'glob';
-import ignore from 'ignore';
-import simpleGit from 'simple-git';
-import { RepositoryContext, FileInfo, DirectoryTree, GitInfo, PackageInfo } from '../types';
-import { ConsoleLogger } from './logger';
-
-export class RepositoryAnalyzer {
-  private logger: ConsoleLogger;
-  private git: any;
-
-  constructor(logger: ConsoleLogger) {
-    this.logger = logger;
-  }
-
-  async analyzeRepository(rootPath: string): Promise<RepositoryContext> {
-    this.logger.info(`Analyzing repository at ${rootPath}`);
-    this.git = simpleGit(rootPath);
-
-    const [files, structure, gitInfo, dependencies, technologies] = await Promise.all([
-      this.scanFiles(rootPath),
-      this.buildDirectoryTree(rootPath),
-      this.getGitInfo(rootPath),
-      this.analyzeDependencies(rootPath),
-      this.detectTechnologies(rootPath)
-    ]);
-
-    const context: RepositoryContext = {
-      rootPath,
-      files,
-      structure,
-      gitInfo,
-      dependencies,
-      technologies
-    };
-
-    this.logger.success(`Repository analysis complete: ${files.length} files, ${technologies.length} technologies`);
-    return context;
-  }
-
-  private async scanFiles(rootPath: string): Promise<FileInfo[]> {
-    const files: FileInfo[] = [];
-    const ignoreRules = ignore();
-
-    // Load common ignore patterns
-    const gitignorePath = path.join(rootPath, '.gitignore');
-    if (await fs.pathExists(gitignorePath)) {
-      const gitignoreContent = await fs.readFile(gitignorePath, 'utf-8');
-      ignoreRules.add(gitignoreContent);
-    }
-
-    // Add common patterns
-    ignoreRules.add([
-      'node_modules/**',
-      '.git/**',
-      'dist/**',
-      'build/**',
-      '*.log',
-      '.env*',
-      '*.tmp',
-      '*.temp',
-      '.DS_Store'
-    ]);
-
-    try {
-      const globPattern = path.join(rootPath, '**/*');
-      const foundFiles = await glob(globPattern, { 
-        dot: false,
-        ignore: ['node_modules/**', '.git/**']
-      });
-
-      for (const filePath of foundFiles) {
-        try {
-          const relativePath = path.relative(rootPath, filePath);
-          
-          // Skip ignored files
-          if (ignoreRules.ignores(relativePath)) {
-            continue;
-          }
-
-          const stats = await fs.stat(filePath);
-          
-          if (stats.isFile()) {
-            const fileInfo: FileInfo = {
-              path: relativePath,
-              type: 'file',
-              size: stats.size,
-              lastModified: stats.mtime,
-              language: this.detectLanguage(filePath),
-              importance: this.calculateImportance(relativePath, stats.size)
-            };
-            files.push(fileInfo);
-          }
-        } catch (error) {
-          // Skip files that can't be accessed
-          continue;
-        }
-      }
-    } catch (error: any) {
-      this.logger.warn('Error scanning files:', error.message);
-    }
-
-    return files.sort((a, b) => b.importance - a.importance);
-  }
-
-  private detectLanguage(filePath: string): string | undefined {
-    const ext = path.extname(filePath).toLowerCase();
-    const languageMap: Record<string, string> = {
-      '.ts': 'typescript',
-      '.tsx': 'typescript',
-      '.js': 'javascript',
-      '.jsx': 'javascript',
-      '.py': 'python',
-      '.java': 'java',
-      '.cpp': 'cpp',
-      '.c': 'c',
-      '.h': 'c',
-      '.cs': 'csharp',
-      '.php': 'php',
-      '.rb': 'ruby',
-      '.go': 'go',
-      '.rs': 'rust',
-      '.swift': 'swift',
-      '.kt': 'kotlin',
-      '.scala': 'scala',
-      '.html': 'html',
-      '.css': 'css',
-      '.scss': 'scss',
-      '.less': 'less',
-      '.json': 'json',
-      '.yaml': 'yaml',
-      '.yml': 'yaml',
-      '.xml': 'xml',
-      '.md': 'markdown',
-      '.sh': 'shell',
-      '.bash': 'shell',
-      '.zsh': 'shell',
-      '.sql': 'sql'
-    };
-
-    return languageMap[ext];
-  }
-
-  private calculateImportance(filePath: string, fileSize: number): number {
-    let score = 1;
-
-    // File type importance
-    if (filePath.includes('package.json') || filePath.includes('requirements.txt') || 
-        filePath.includes('Cargo.toml') || filePath.includes('go.mod')) {
-      score += 10;
-    }
-
-    if (filePath.includes('README') || filePath.includes('CHANGELOG')) {
-      score += 8;
-    }
-
-    if (filePath.includes('.config') || filePath.includes('tsconfig') || 
-        filePath.includes('webpack') || filePath.includes('vite.config')) {
-      score += 6;
-    }
-
-    // Directory importance
-    if (filePath.includes('src/') || filePath.includes('lib/')) {
-      score += 5;
-    }
-
-    if (filePath.includes('test/') || filePath.includes('spec/')) {
-      score += 2;
-    }
-
-    // File size (larger files might be more important)
-    if (fileSize > 10000) score += 3;
-    else if (fileSize > 5000) score += 2;
-    else if (fileSize > 1000) score += 1;
-
-    return score;
-  }
-
-  private async buildDirectoryTree(rootPath: string): Promise<DirectoryTree> {
-    const buildTree = async (currentPath: string): Promise<DirectoryTree> => {
-      const stats = await fs.stat(currentPath);
-      const name = path.basename(currentPath);
-      const relativePath = path.relative(rootPath, currentPath);
-
-      if (stats.isDirectory()) {
-        const children: DirectoryTree[] = [];
-        try {
-          const entries = await fs.readdir(currentPath);
-          for (const entry of entries) {
-            if (entry.startsWith('.') && entry !== '.gitignore') continue;
-            if (entry === 'node_modules') continue;
-            
-            const entryPath = path.join(currentPath, entry);
-            const child = await buildTree(entryPath);
-            children.push(child);
-          }
-        } catch (error) {
-          // Skip directories we can't read
-        }
-
-        return {
-          name,
-          type: 'directory',
-          path: relativePath || '.',
-          children: children.sort((a, b) => {
-            if (a.type !== b.type) {
-              return a.type === 'directory' ? -1 : 1;
-            }
-            return a.name.localeCompare(b.name);
-          })
-        };
-      } else {
-        return {
-          name,
-          type: 'file',
-          path: relativePath
-        };
-      }
-    };
-
-    return buildTree(rootPath);
-  }
-
-  private async getGitInfo(rootPath: string): Promise<GitInfo | undefined> {
-    try {
-      const git = simpleGit(rootPath);
-      
-      const [status, log, remotes] = await Promise.all([
-        git.status(),
-        git.log({ maxCount: 1 }),
-        git.getRemotes(true)
-      ]);
-
-      const hasUncommittedChanges = !status.isClean();
-      const lastCommit = log.latest;
-      const origin = remotes.find(r => r.name === 'origin');
-
-      return {
-        branch: status.current || 'unknown',
-        hasUncommittedChanges,
-        remoteUrl: origin?.refs?.fetch,
-        lastCommit: {
-          hash: lastCommit?.hash || '',
-          message: lastCommit?.message || '',
-          author: lastCommit?.author_name || '',
-          date: lastCommit?.date ? new Date(lastCommit.date) : new Date()
-        }
-      };
-    } catch (error) {
-      this.logger.debug('Git info not available:', error);
-      return undefined;
-    }
-  }
-
-  private async analyzeDependencies(rootPath: string): Promise<PackageInfo[]> {
-    const dependencies: PackageInfo[] = [];
-
-    // Package.json (npm/yarn)
-    const packageJsonPath = path.join(rootPath, 'package.json');
-    if (await fs.pathExists(packageJsonPath)) {
-      const packageJson = await fs.readJson(packageJsonPath);
-      dependencies.push({
-        type: 'npm',
-        file: 'package.json',
-        dependencies: packageJson.dependencies || {},
-        devDependencies: packageJson.devDependencies || {}
-      });
-    }
-
-    // Requirements.txt (pip)
-    const requirementsPath = path.join(rootPath, 'requirements.txt');
-    if (await fs.pathExists(requirementsPath)) {
-      const content = await fs.readFile(requirementsPath, 'utf-8');
-      const deps: Record<string, string> = {};
-      content.split('\n').forEach(line => {
-        const trimmed = line.trim();
-        if (trimmed && !trimmed.startsWith('#')) {
-          const [name, version] = trimmed.split('==');
-          deps[name] = version || 'latest';
-        }
-      });
-      dependencies.push({
-        type: 'pip',
-        file: 'requirements.txt',
-        dependencies: deps
-      });
-    }
-
-    return dependencies;
-  }
-
-  private async detectTechnologies(rootPath: string): Promise<string[]> {
-    const technologies = new Set<string>();
-
-    // Check for specific files
-    const fileIndicators: Record<string, string[]> = {
-      'package.json': ['Node.js', 'npm'],
-      'yarn.lock': ['Yarn'],
-      'requirements.txt': ['Python', 'pip'],
-      'Cargo.toml': ['Rust', 'Cargo'],
-      'go.mod': ['Go'],
-      'pom.xml': ['Java', 'Maven'],
-      'build.gradle': ['Java', 'Gradle'],
-      'Dockerfile': ['Docker'],
-      'docker-compose.yml': ['Docker Compose'],
-      'tsconfig.json': ['TypeScript'],
-      'webpack.config.js': ['Webpack'],
-      'vite.config.js': ['Vite'],
-      'next.config.js': ['Next.js'],
-      'nuxt.config.js': ['Nuxt.js'],
-      'angular.json': ['Angular'],
-      'vue.config.js': ['Vue.js'],
-      'svelte.config.js': ['Svelte']
-    };
-
-    for (const [file, techs] of Object.entries(fileIndicators)) {
-      if (await fs.pathExists(path.join(rootPath, file))) {
-        techs.forEach(tech => technologies.add(tech));
-      }
-    }
-
-    return Array.from(technologies);
-  }
-}
diff --git a/src/core/todo-manager.ts b/src/core/todo-manager.ts
deleted file mode 100644
index 92ccef2..0000000
--- a/src/core/todo-manager.ts
+++ /dev/null
@@ -1,64 +0,0 @@
-import * as fs from 'fs-extra';
-import * as path from 'path';
-import { nanoid } from 'nanoid';
-import { TodoItem, TodoListResponse, TodoStatus } from '../types';
-
-export class TodoManager {
-  private storagePath: string;
-
-  constructor(repositoryPath: string) {
-    this.storagePath = path.join(repositoryPath, '.devrev-todos.json');
-  }
-
-  private async readTodos(): Promise<TodoItem[]> {
-    try {
-      if (!(await fs.pathExists(this.storagePath))) return [];
-      const raw = await fs.readFile(this.storagePath, 'utf-8');
-      const parsed = JSON.parse(raw) as TodoListResponse;
-      return parsed.items || [];
-    } catch {
-      return [];
-    }
-  }
-
-  private async writeTodos(items: TodoItem[]): Promise<void> {
-    const payload: TodoListResponse = { items };
-    await fs.writeFile(this.storagePath, JSON.stringify(payload, null, 2), 'utf-8');
-  }
-
-  async list(): Promise<TodoItem[]> {
-    return this.readTodos();
-  }
-
-  async create(title: string, description?: string, status: TodoStatus = 'pending'): Promise<TodoItem> {
-    const items = await this.readTodos();
-    const now = new Date().toISOString();
-    const item: TodoItem = {
-      id: nanoid(),
-      title,
-      description,
-      status,
-      createdAt: now,
-      updatedAt: now
-    };
-    items.push(item);
-    await this.writeTodos(items);
-    return item;
-  }
-
-  async update(id: string, patch: Partial<Omit<TodoItem, 'id' | 'createdAt'>>): Promise<TodoItem | null> {
-    const items = await this.readTodos();
-    const idx = items.findIndex(i => i.id === id);
-    if (idx === -1) return null;
-    const now = new Date().toISOString();
-    items[idx] = { ...items[idx], ...patch, updatedAt: now } as TodoItem;
-    await this.writeTodos(items);
-    return items[idx];
-  }
-
-  async complete(id: string): Promise<TodoItem | null> {
-    return this.update(id, { status: 'completed' });
-  }
-}
-
-
diff --git a/src/index.ts b/src/index.ts
index 7c4ebd3..68d7762 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,88 +1,159 @@
-// Core exports
-export * from './core/config';
-export * from './core/logger';
-export * from './core/llm-client';
-export * from './core/repository-analyzer';
+#!/usr/bin/env node
+/**
+ * Main entry point for the multi-agent coding system
+ */
+
+// Load environment variables from .env file
+import * as dotenv from 'dotenv';
+import * as path from 'path';
+
+// Try to load .env from current directory first, then from the CLI tool's directory
+dotenv.config();
+dotenv.config({ path: path.join(__dirname, '..', '.env') });
+
+import { Command } from 'commander';
+import { OrchestratorAgent } from './agents/orchestrator-agent';
+
+import { DockerExecutor, LocalExecutor, TerminalBenchExecutor } from './core/execution/command-executor';
+import { setupFileLogging } from './core/logging/logger';
+import winston from 'winston';
+
+const program = new Command();
+
+program
+  .name('multi-agent-coding-system')
+  .description('TypeScript implementation of multi-agent AI coding system')
+  .version('0.1.0');
+
+program
+  .command('run')
+  .description('Run the orchestrator agent with a task')
+  .argument('<task>', 'Task description to execute')
+  .option('-c, --container <name>', 'Docker container name to execute in')
+  .option('-m, --model <model>', 'LLM model to use', process.env.LITELLM_MODEL || 'moonshotai/kimi-k2:free')
+  .option('-t, --temperature <temp>', 'Temperature for LLM', process.env.LITELLM_TEMPERATURE || '0.1')
+  .option('--api-key <key>', 'API key for LLM', process.env.OPENROUTER_API_KEY || process.env.LITE_LLM_API_KEY || process.env.OPENAI_API_KEY)
+  .option('--api-base <url>', 'API base URL', process.env.OPENROUTER_BASE_URL || process.env.LITE_LLM_API_BASE || process.env.OPENAI_BASE_URL)
+  .option('--max-turns <turns>', 'Maximum turns before stopping', '50')
+  .option('--log-level <level>', 'Logging level', 'INFO')
+  .option('--log-dir <dir>', 'Directory for detailed logs', './logs')
+  .option('--workdir <path>', 'Working directory for command execution (host for local, in-container path for docker)')
+  .action(async (task: string, options) => {
+    // Setup logging
+    const logFile = setupFileLogging(options.logLevel, options.logDir);
+    winston.info(`Logging to: ${logFile}`);
+
+    // Create command executor based on environment
+    let executor;
+    if (options.container) {
+      executor = new DockerExecutor(options.container, options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    } else if (process.env.TERMINAL_BENCH_SESSION === 'true') {
+      // We're running in Terminal-Bench environment
+      winston.info('Detected Terminal-Bench environment, using TerminalBenchExecutor');
+      executor = new TerminalBenchExecutor(options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    } else {
+      executor = new LocalExecutor(options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    }
 
-// Types
-export * from './types';
+    // Create orchestrator
+    const orchestrator = new OrchestratorAgent({
+      model: options.model,
+      temperature: parseFloat(options.temperature),
+      apiKey: options.apiKey,
+      apiBase: options.apiBase,
+      loggingDir: options.logDir,
+    });
+
+    // Setup the orchestrator
+    orchestrator.setup(executor, options.logDir);
+
+    try {
+      winston.info(`Starting task execution: ${task}`);
+      winston.info(`Model: ${options.model || 'default'}`);
+      winston.info(`Temperature: ${options.temperature}`);
+      winston.info(`Max turns: ${options.maxTurns}`);
+
+      // Run the task
+      const result = await orchestrator.run(task, parseInt(options.maxTurns));
+
+      // Display results
+      winston.info('\n' + '='.repeat(60));
+      winston.info('EXECUTION RESULT:');
+      winston.info('='.repeat(60));
+      winston.info(`Completed: ${result.completed}`);
+      winston.info(`Finish message: ${result.finishMessage || 'N/A'}`);
+      winston.info(`Turns executed: ${result.turnsExecuted}`);
+      winston.info(`Max turns reached: ${result.maxTurnsReached}`);
+
+      // Show token usage
+      const tokenUsage = orchestrator.getTokenUsage();
+      winston.info(`Token usage - Input: ${tokenUsage.input}, Output: ${tokenUsage.output}`);
+
+      // Exit with appropriate code
+      process.exit(result.completed ? 0 : 1);
+
+    } catch (error) {
+      winston.error(`Fatal error during execution: ${error}`);
+      process.exit(1);
+    }
+  });
+
+program
+  .command('test')
+  .description('Run a simple test to verify the system works')
+  .option('-c, --container <name>', 'Docker container name to execute in')
+  .option('-m, --model <model>', 'LLM model to use', process.env.LITELLM_MODEL)
+  .option('--workdir <path>', 'Working directory for command execution (host for local, in-container path for docker)')
+  .action(async (options) => {
+    const logFile = setupFileLogging('INFO');
+    winston.info(`Test logging to: ${logFile}`);
+
+    // Create command executor based on environment
+    let executor;
+    if (options.container) {
+      executor = new DockerExecutor(options.container, options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    } else if (process.env.TERMINAL_BENCH_SESSION === 'true') {
+      // We're running in Terminal-Bench environment
+      winston.info('Detected Terminal-Bench environment, using TerminalBenchExecutor');
+      executor = new TerminalBenchExecutor(options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    } else {
+      executor = new LocalExecutor(options.workdir || process.env.TB_WORKDIR || process.env.TERMINAL_BENCH_WORKDIR);
+    }
+
+    const orchestrator = new OrchestratorAgent({
+      model: options.model,
+      temperature: 0.1,
+    });
+
+    orchestrator.setup(executor);
 
-// Agents
-export * from './agents';
-
-// Tools
-export * from './tools';
-
-// CLI
-export * from './cli/commands';
-
-// Main application class
-import { ConfigManager } from './core/config';
-import { ConsoleLogger } from './core/logger';
-import { OpenRouterClient } from './core/llm-client';
-import { ToolRegistry } from './tools';
-import { AgentOrchestrator } from './agents/orchestrator';
-import { Config, AgentResult, ConversationMessage } from './types';
-
-export class DevRevCoderAgent {
-  private config: Config;
-  private logger: ConsoleLogger;
-  private llmClient: OpenRouterClient;
-  private toolRegistry: ToolRegistry;
-  private orchestrator: AgentOrchestrator;
-
-  constructor(configOverrides?: Partial<Config>) {
-    this.config = ConfigManager.getInstance().getConfig();
-    
-    // Apply any config overrides
-    if (configOverrides) {
-      this.config = { ...this.config, ...configOverrides };
+    try {
+      const testTask = "Create a file called 'hello.txt' with content 'Hello, world!' and verify it was created correctly.";
+      winston.info(`Running test task: ${testTask}`);
+
+      const result = await orchestrator.run(testTask, 10);
+
+      winston.info('\n' + '='.repeat(40));
+      winston.info('TEST RESULT:');
+      winston.info('='.repeat(40));
+      winston.info(`Success: ${result.completed}`);
+      winston.info(`Message: ${result.finishMessage || 'No message'}`);
+      winston.info(`Turns: ${result.turnsExecuted}`);
+
+      process.exit(result.completed ? 0 : 1);
+
+    } catch (error) {
+      winston.error(`Test failed: ${error}`);
+      process.exit(1);
     }
+  });
 
-    this.logger = new ConsoleLogger(this.config);
-    this.llmClient = new OpenRouterClient(this.config, this.logger);
-    this.toolRegistry = new ToolRegistry();
-    this.orchestrator = new AgentOrchestrator(this.config, this.toolRegistry, this.llmClient, this.logger);
-
-    this.logger.debug('DevRev Coder Agent initialized');
-  }
-
-  async executeRequest(
-    request: string, 
-    repositoryPath: string = process.cwd(),
-    conversationHistory?: ConversationMessage[]
-  ): Promise<AgentResult> {
-    return this.orchestrator.executeRequest(request, repositoryPath, conversationHistory);
-  }
-
-  async executeWithMultipleAgents(
-    request: string,
-    repositoryPath: string = process.cwd(),
-    conversationHistory?: ConversationMessage[]
-  ): Promise<AgentResult[]> {
-    return this.orchestrator.executeWithMultipleAgents(request, repositoryPath, conversationHistory);
-  }
-
-  async getAgentRecommendation(request: string) {
-    return this.orchestrator.getAgentRecommendation(request);
-  }
-
-  getAvailableAgents() {
-    return this.orchestrator.getAvailableAgents();
-  }
-
-  getAvailableTools() {
-    return this.toolRegistry.getAllTools();
-  }
-
-  getConfig() {
-    return this.config;
-  }
-
-  getLogger() {
-    return this.logger;
-  }
+// Parse command line arguments
+if (require.main === module) {
+  program.parse();
 }
 
-// Default export
-export default DevRevCoderAgent;
+export { OrchestratorAgent };
+export * from './types';
+export * from './core/execution/command-executor';
+export * from './core/llm/client';
diff --git a/src/tools/base-tool.ts b/src/tools/base-tool.ts
deleted file mode 100644
index 128105e..0000000
--- a/src/tools/base-tool.ts
+++ /dev/null
@@ -1,155 +0,0 @@
-import { z } from 'zod';
-import { Tool, ToolContext, ToolResult } from '../types';
-
-export abstract class BaseTool implements Tool {
-  abstract name: string;
-  abstract description: string;
-  abstract parameters: z.ZodSchema;
-
-  abstract execute(params: any, context: ToolContext): Promise<ToolResult>;
-
-  protected createSuccessResult(data: any, message?: string): ToolResult {
-    return {
-      success: true,
-      data,
-      message
-    };
-  }
-
-  protected createErrorResult(error: string, data?: any): ToolResult {
-    return {
-      success: false,
-      data: data || null,
-      error
-    };
-  }
-
-  protected validateParams<T>(params: unknown): T {
-    try {
-      // Convert string booleans and numbers before validation
-      const convertedParams = this.convertStringParams(params);
-      return this.parameters.parse(convertedParams) as T;
-    } catch (error: any) {
-      throw new Error(`Invalid parameters: ${error.message}`);
-    }
-  }
-
-  private convertStringParams(params: any): any {
-    if (!params || typeof params !== 'object') return params;
-    
-    const converted: any = Array.isArray(params) ? [...params] : { ...params };
-    
-    // Get the expected parameter types from the schema
-    const schemaShape = this.getSchemaShape();
-    
-    for (const [key, value] of Object.entries(converted)) {
-      const expectedType = schemaShape[key];
-      
-      if (typeof value === 'string' && expectedType) {
-        // Only convert if we know the expected type
-        if (expectedType === 'boolean') {
-          if (value === 'true') {
-            converted[key] = true;
-          } else if (value === 'false') {
-            converted[key] = false;
-          }
-        } else if (expectedType === 'number') {
-          if (/^\d+$/.test(value)) {
-            converted[key] = parseInt(value, 10);
-          } else if (/^\d*\.\d+$/.test(value)) {
-            converted[key] = parseFloat(value);
-          }
-        }
-        // If expectedType is 'string', leave it as string
-      } else if (typeof value === 'object' && value !== null) {
-        // Recursively convert nested objects
-        converted[key] = this.convertStringParams(value);
-      }
-    }
-    
-    return converted;
-  }
-
-  private getSchemaShape(): Record<string, string> {
-    // This is a simplified version - in a full implementation you'd parse the Zod schema
-    // For now, return common parameter types for our tools
-    const commonTypes: Record<string, string> = {
-      'recursive': 'boolean',
-      'max_depth': 'number',
-      'max_size': 'number',
-      'create_directories': 'boolean',
-      'staged': 'boolean',
-      'add_all': 'boolean',
-      'max_count': 'number',
-      'all': 'boolean',
-      'extract_functions': 'boolean',
-      'extract_classes': 'boolean',
-      'extract_imports': 'boolean',
-      'extract_types': 'boolean',
-      'start_line': 'number',
-      'end_line': 'number',
-      'prettyPrint': 'boolean'
-    };
-    return commonTypes;
-  }
-
-  toOpenAIToolSpec() {
-    return {
-      type: 'function',
-      function: {
-        name: this.name,
-        description: this.description,
-        parameters: this.zodToJsonSchema(this.parameters)
-      }
-    };
-  }
-
-  private zodToJsonSchema(schema: z.ZodSchema): any {
-    // Basic conversion from Zod to JSON Schema
-    // This is a simplified version - you might want to use a proper library like zod-to-json-schema
-    
-    if (schema instanceof z.ZodObject) {
-      const shape = schema._def.shape();
-      const properties: any = {};
-      const required: string[] = [];
-
-      for (const [key, value] of Object.entries(shape)) {
-        properties[key] = this.zodToJsonSchema(value as z.ZodSchema);
-        if (!(value as any)._def.defaultValue) {
-          required.push(key);
-        }
-      }
-
-      return {
-        type: 'object',
-        properties,
-        required
-      };
-    }
-
-    if (schema instanceof z.ZodString) {
-      return { type: 'string' };
-    }
-
-    if (schema instanceof z.ZodNumber) {
-      return { type: 'number' };
-    }
-
-    if (schema instanceof z.ZodBoolean) {
-      return { type: 'boolean' };
-    }
-
-    if (schema instanceof z.ZodArray) {
-      return {
-        type: 'array',
-        items: this.zodToJsonSchema(schema._def.type)
-      };
-    }
-
-    if (schema instanceof z.ZodOptional) {
-      return this.zodToJsonSchema(schema._def.innerType);
-    }
-
-    return { type: 'string' }; // fallback
-  }
-}
diff --git a/src/tools/code-tools.ts b/src/tools/code-tools.ts
deleted file mode 100644
index 8a5f4b0..0000000
--- a/src/tools/code-tools.ts
+++ /dev/null
@@ -1,384 +0,0 @@
-import { z } from 'zod';
-import * as fs from 'fs-extra';
-import * as path from 'path';
-import { BaseTool } from './base-tool';
-import { ToolContext, ToolResult } from '../types';
-
-export class AnalyzeCodeTool extends BaseTool {
-  name = 'analyze_code';
-  description = 'Analyze code structure and extract information like functions, classes, imports';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to analyze'),
-    extract_functions: z.boolean().default(true).describe('Extract function definitions'),
-    extract_classes: z.boolean().default(true).describe('Extract class definitions'),
-    extract_imports: z.boolean().default(true).describe('Extract import statements'),
-    extract_types: z.boolean().default(true).describe('Extract type definitions')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { 
-        file_path, 
-        extract_functions, 
-        extract_classes, 
-        extract_imports, 
-        extract_types 
-      } = this.validateParams<{
-        file_path: string;
-        extract_functions: boolean;
-        extract_classes: boolean;
-        extract_imports: boolean;
-        extract_types: boolean;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('File not found');
-      }
-
-      const content = await fs.readFile(fullPath, 'utf-8');
-      const lines = content.split('\n');
-      const extension = path.extname(file_path).toLowerCase();
-
-      const analysis = {
-        file_path,
-        language: this.detectLanguage(extension),
-        line_count: lines.length,
-        character_count: content.length,
-        functions: extract_functions ? this.extractFunctions(content, extension) : [],
-        classes: extract_classes ? this.extractClasses(content, extension) : [],
-        imports: extract_imports ? this.extractImports(content, extension) : [],
-        types: extract_types ? this.extractTypes(content, extension) : [],
-        complexity: this.calculateComplexity(content, extension)
-      };
-
-      context.logger.debug(`Analyzed code: ${file_path} (${analysis.functions.length} functions, ${analysis.classes.length} classes)`);
-
-      return this.createSuccessResult(analysis);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to analyze code: ${error.message}`);
-    }
-  }
-
-  private detectLanguage(extension: string): string {
-    const languageMap: Record<string, string> = {
-      '.ts': 'typescript',
-      '.tsx': 'typescript',
-      '.js': 'javascript',
-      '.jsx': 'javascript',
-      '.py': 'python',
-      '.java': 'java',
-      '.cpp': 'cpp',
-      '.c': 'c',
-      '.cs': 'csharp',
-      '.php': 'php',
-      '.rb': 'ruby',
-      '.go': 'go',
-      '.rs': 'rust',
-      '.swift': 'swift'
-    };
-    return languageMap[extension] || 'unknown';
-  }
-
-  private extractFunctions(content: string, extension: string): any[] {
-    const functions: any[] = [];
-    const lines = content.split('\n');
-
-    // TypeScript/JavaScript function patterns
-    if (['.ts', '.tsx', '.js', '.jsx'].includes(extension)) {
-      const functionPatterns = [
-        /^\s*function\s+(\w+)\s*\([^)]*\)/,
-        /^\s*const\s+(\w+)\s*=\s*\([^)]*\)\s*=>/,
-        /^\s*(\w+)\s*\([^)]*\)\s*\{/,
-        /^\s*async\s+function\s+(\w+)\s*\([^)]*\)/,
-        /^\s*export\s+function\s+(\w+)\s*\([^)]*\)/
-      ];
-
-      lines.forEach((line, index) => {
-        functionPatterns.forEach(pattern => {
-          const match = line.match(pattern);
-          if (match) {
-            functions.push({
-              name: match[1],
-              line: index + 1,
-              signature: line.trim()
-            });
-          }
-        });
-      });
-    }
-
-    // Python function patterns
-    if (extension === '.py') {
-      const pythonFunctionPattern = /^\s*def\s+(\w+)\s*\([^)]*\):/;
-      lines.forEach((line, index) => {
-        const match = line.match(pythonFunctionPattern);
-        if (match) {
-          functions.push({
-            name: match[1],
-            line: index + 1,
-            signature: line.trim()
-          });
-        }
-      });
-    }
-
-    return functions;
-  }
-
-  private extractClasses(content: string, extension: string): any[] {
-    const classes: any[] = [];
-    const lines = content.split('\n');
-
-    // TypeScript/JavaScript class patterns
-    if (['.ts', '.tsx', '.js', '.jsx'].includes(extension)) {
-      const classPatterns = [
-        /^\s*class\s+(\w+)/,
-        /^\s*export\s+class\s+(\w+)/,
-        /^\s*abstract\s+class\s+(\w+)/
-      ];
-
-      lines.forEach((line, index) => {
-        classPatterns.forEach(pattern => {
-          const match = line.match(pattern);
-          if (match) {
-            classes.push({
-              name: match[1],
-              line: index + 1,
-              signature: line.trim()
-            });
-          }
-        });
-      });
-    }
-
-    // Python class patterns
-    if (extension === '.py') {
-      const pythonClassPattern = /^\s*class\s+(\w+)/;
-      lines.forEach((line, index) => {
-        const match = line.match(pythonClassPattern);
-        if (match) {
-          classes.push({
-            name: match[1],
-            line: index + 1,
-            signature: line.trim()
-          });
-        }
-      });
-    }
-
-    return classes;
-  }
-
-  private extractImports(content: string, extension: string): any[] {
-    const imports: any[] = [];
-    const lines = content.split('\n');
-
-    // TypeScript/JavaScript import patterns
-    if (['.ts', '.tsx', '.js', '.jsx'].includes(extension)) {
-      const importPatterns = [
-        /^\s*import\s+.*\s+from\s+['"]([^'"]+)['"]/,
-        /^\s*import\s+['"]([^'"]+)['"]/,
-        /^\s*const\s+.*\s*=\s*require\(['"]([^'"]+)['"]\)/
-      ];
-
-      lines.forEach((line, index) => {
-        importPatterns.forEach(pattern => {
-          const match = line.match(pattern);
-          if (match) {
-            imports.push({
-              module: match[1],
-              line: index + 1,
-              statement: line.trim()
-            });
-          }
-        });
-      });
-    }
-
-    // Python import patterns
-    if (extension === '.py') {
-      const pythonImportPatterns = [
-        /^\s*import\s+(\w+)/,
-        /^\s*from\s+(\w+)\s+import/
-      ];
-
-      lines.forEach((line, index) => {
-        pythonImportPatterns.forEach(pattern => {
-          const match = line.match(pattern);
-          if (match) {
-            imports.push({
-              module: match[1],
-              line: index + 1,
-              statement: line.trim()
-            });
-          }
-        });
-      });
-    }
-
-    return imports;
-  }
-
-  private extractTypes(content: string, extension: string): any[] {
-    const types: any[] = [];
-    
-    if (['.ts', '.tsx'].includes(extension)) {
-      const lines = content.split('\n');
-      const typePatterns = [
-        /^\s*type\s+(\w+)\s*=/,
-        /^\s*interface\s+(\w+)/,
-        /^\s*enum\s+(\w+)/
-      ];
-
-      lines.forEach((line, index) => {
-        typePatterns.forEach(pattern => {
-          const match = line.match(pattern);
-          if (match) {
-            types.push({
-              name: match[1],
-              line: index + 1,
-              signature: line.trim()
-            });
-          }
-        });
-      });
-    }
-
-    return types;
-  }
-
-  private calculateComplexity(content: string, extension: string): number {
-    let complexity = 1; // Base complexity
-
-    // Count decision points
-    const decisionKeywords = ['if', 'else', 'switch', 'case', 'for', 'while', 'catch', 'try'];
-    decisionKeywords.forEach(keyword => {
-      const regex = new RegExp(`\\b${keyword}\\b`, 'g');
-      const matches = content.match(regex);
-      if (matches) {
-        complexity += matches.length;
-      }
-    });
-
-    return complexity;
-  }
-}
-
-export class RefactorCodeTool extends BaseTool {
-  name = 'refactor_code';
-  description = 'Apply refactoring operations to code';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to refactor'),
-    operation: z.enum(['rename_variable', 'extract_function', 'inline_variable', 'move_function']).describe('Type of refactoring to perform'),
-    old_name: z.string().describe('Current name (for rename operations)'),
-    new_name: z.string().describe('New name (for rename operations)'),
-    start_line: z.number().optional().describe('Start line for extraction operations'),
-    end_line: z.number().optional().describe('End line for extraction operations')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableFileOperations) {
-        return this.createErrorResult('File operations are disabled');
-      }
-
-      const { 
-        file_path, 
-        operation, 
-        old_name, 
-        new_name, 
-        start_line, 
-        end_line 
-      } = this.validateParams<{
-        file_path: string;
-        operation: string;
-        old_name: string;
-        new_name: string;
-        start_line?: number;
-        end_line?: number;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('File not found');
-      }
-
-      const originalContent = await fs.readFile(fullPath, 'utf-8');
-      let refactoredContent = originalContent;
-
-      switch (operation) {
-        case 'rename_variable':
-          refactoredContent = this.renameVariable(originalContent, old_name, new_name);
-          break;
-        case 'extract_function':
-          if (start_line && end_line) {
-            refactoredContent = this.extractFunction(originalContent, new_name, start_line, end_line);
-          } else {
-            return this.createErrorResult('start_line and end_line required for extract_function');
-          }
-          break;
-        default:
-          return this.createErrorResult(`Unsupported refactoring operation: ${operation}`);
-      }
-
-      // Write the refactored content back
-      await fs.writeFile(fullPath, refactoredContent, 'utf-8');
-
-      context.logger.debug(`Applied ${operation} refactoring to ${file_path}`);
-
-      return this.createSuccessResult({
-        operation,
-        file_path,
-        changes_made: originalContent !== refactoredContent,
-        old_length: originalContent.length,
-        new_length: refactoredContent.length
-      }, `Successfully applied ${operation} to ${file_path}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to refactor code: ${error.message}`);
-    }
-  }
-
-  private renameVariable(content: string, oldName: string, newName: string): string {
-    // Simple word boundary replacement - more sophisticated AST-based refactoring would be better
-    const regex = new RegExp(`\\b${oldName}\\b`, 'g');
-    return content.replace(regex, newName);
-  }
-
-  private extractFunction(content: string, functionName: string, startLine: number, endLine: number): string {
-    const lines = content.split('\n');
-    
-    if (startLine < 1 || endLine > lines.length || startLine > endLine) {
-      throw new Error('Invalid line range for extraction');
-    }
-
-    // Extract the selected lines
-    const extractedLines = lines.slice(startLine - 1, endLine);
-    const extractedCode = extractedLines.join('\n');
-
-    // Create the new function
-    const newFunction = `\nfunction ${functionName}() {\n${extractedCode}\n}\n`;
-
-    // Replace the original lines with a function call
-    const functionCall = `  ${functionName}();`;
-    
-    const newLines = [
-      ...lines.slice(0, startLine - 1),
-      functionCall,
-      ...lines.slice(endLine),
-      newFunction
-    ];
-
-    return newLines.join('\n');
-  }
-}
diff --git a/src/tools/edit-tools.ts b/src/tools/edit-tools.ts
deleted file mode 100644
index 5a8032a..0000000
--- a/src/tools/edit-tools.ts
+++ /dev/null
@@ -1,176 +0,0 @@
-import { z } from 'zod';
-import * as fs from 'fs-extra';
-import * as path from 'path';
-import { BaseTool } from './base-tool';
-import { ToolContext, ToolResult } from '../types';
-
-export class ApplyTextEditsTool extends BaseTool {
-  name = 'apply_text_edits';
-  description = 'Apply multiple text edits to a file using start/end lines or markers.';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to edit'),
-    edits: z.array(z.object({
-      start_line: z.number().optional().describe('1-based inclusive start line of the range to replace'),
-      end_line: z.number().optional().describe('1-based inclusive end line of the range to replace'),
-      before_marker: z.string().optional().describe('Unique text to find before the insertion/replacement'),
-      after_marker: z.string().optional().describe('Unique text to find after the insertion/replacement'),
-      new_text: z.string().default('').describe('Replacement text or inserted text'),
-      mode: z.enum(['replace', 'insert_before', 'insert_after']).default('replace')
-    })).min(1).describe('List of edits to apply in order')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableFileOperations) {
-        return this.createErrorResult('File operations are disabled');
-      }
-
-      const { file_path, edits } = this.validateParams<{
-        file_path: string;
-        edits: Array<{
-          start_line?: number;
-          end_line?: number;
-          before_marker?: string;
-          after_marker?: string;
-          new_text: string;
-          mode: 'replace' | 'insert_before' | 'insert_after';
-        }>;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('File not found');
-      }
-
-      const original = await fs.readFile(fullPath, 'utf-8');
-      let modified = original;
-
-      for (const edit of edits) {
-        const usingRange = edit.start_line !== undefined || edit.end_line !== undefined;
-        const usingMarkers = !!(edit.before_marker || edit.after_marker);
-        if (usingRange && usingMarkers) {
-          return this.createErrorResult('Use either range (start_line/end_line) or markers, not both');
-        }
-
-        if (usingRange) {
-          const start = Math.max(1, edit.start_line ?? edit.end_line ?? 1) - 1;
-          const end = Math.max(start, (edit.end_line ?? edit.start_line ?? (start + 1)) - 1);
-          const lines = modified.split('\n');
-          const head = lines.slice(0, start).join('\n');
-          const tail = lines.slice(end + 1).join('\n');
-          modified = [head, edit.new_text, tail].filter(Boolean).join('\n');
-          continue;
-        }
-
-        const beforeIdx = edit.before_marker ? modified.indexOf(edit.before_marker) : -1;
-        const afterIdx = edit.after_marker ? modified.indexOf(edit.after_marker) : -1;
-
-        if (edit.mode === 'replace') {
-          if (edit.before_marker && edit.after_marker && beforeIdx !== -1 && afterIdx !== -1 && afterIdx >= beforeIdx) {
-            modified = modified.slice(0, beforeIdx + edit.before_marker.length) + edit.new_text + modified.slice(afterIdx);
-          } else {
-            return this.createErrorResult('Markers not found for replace operation');
-          }
-        } else if (edit.mode === 'insert_before') {
-          if (edit.before_marker && beforeIdx !== -1) {
-            modified = modified.slice(0, beforeIdx) + edit.new_text + modified.slice(beforeIdx);
-          } else {
-            return this.createErrorResult('before_marker not found for insert_before');
-          }
-        } else if (edit.mode === 'insert_after') {
-          if (edit.after_marker && afterIdx !== -1) {
-            const insertPos = afterIdx + edit.after_marker.length;
-            modified = modified.slice(0, insertPos) + edit.new_text + modified.slice(insertPos);
-          } else {
-            return this.createErrorResult('after_marker not found for insert_after');
-          }
-        }
-      }
-
-      if (modified !== original) {
-        await fs.writeFile(fullPath, modified, 'utf-8');
-        context.logger.debug(`Applied ${edits.length} edits to ${file_path}`);
-      }
-
-      return this.createSuccessResult({
-        path: file_path,
-        changed: modified !== original,
-        original_length: original.length,
-        new_length: modified.length
-      }, modified !== original ? `Updated ${file_path}` : 'No changes applied');
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to apply text edits: ${error.message}`);
-    }
-  }
-}
-
-export class InsertTextTool extends BaseTool {
-  name = 'insert_text';
-  description = 'Insert text into a file at a specific line or around a marker.';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to modify'),
-    new_text: z.string().describe('Text to insert'),
-    line: z.number().optional().describe('1-based line to insert before'),
-    before_marker: z.string().optional().describe('Insert before the first occurrence of this text'),
-    after_marker: z.string().optional().describe('Insert after the first occurrence of this text')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableFileOperations) {
-        return this.createErrorResult('File operations are disabled');
-      }
-
-      const { file_path, new_text, line, before_marker, after_marker } = this.validateParams<{
-        file_path: string;
-        new_text: string;
-        line?: number;
-        before_marker?: string;
-        after_marker?: string;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('File not found');
-      }
-
-      const content = await fs.readFile(fullPath, 'utf-8');
-      let modified = content;
-
-      if (line !== undefined) {
-        const lines = content.split('\n');
-        const idx = Math.max(0, Math.min(lines.length, line - 1));
-        lines.splice(idx, 0, new_text);
-        modified = lines.join('\n');
-      } else if (before_marker) {
-        const idx = content.indexOf(before_marker);
-        if (idx === -1) return this.createErrorResult('before_marker not found');
-        modified = content.slice(0, idx) + new_text + content.slice(idx);
-      } else if (after_marker) {
-        const idx = content.indexOf(after_marker);
-        if (idx === -1) return this.createErrorResult('after_marker not found');
-        const insertPos = idx + after_marker.length;
-        modified = content.slice(0, insertPos) + new_text + content.slice(insertPos);
-      } else {
-        return this.createErrorResult('Must provide line, before_marker, or after_marker');
-      }
-
-      if (modified !== content) {
-        await fs.writeFile(fullPath, modified, 'utf-8');
-        context.logger.debug(`Inserted text into ${file_path}`);
-      }
-
-      return this.createSuccessResult({ path: file_path, changed: modified !== content }, modified !== content ? `Updated ${file_path}` : 'No changes applied');
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to insert text: ${error.message}`);
-    }
-  }
-}
-
-
diff --git a/src/tools/file-tools.ts b/src/tools/file-tools.ts
deleted file mode 100644
index 86ec201..0000000
--- a/src/tools/file-tools.ts
+++ /dev/null
@@ -1,263 +0,0 @@
-import { z } from 'zod';
-import * as fs from 'fs-extra';
-import * as path from 'path';
-import { BaseTool } from './base-tool';
-import { ToolContext, ToolResult } from '../types';
-
-export class ReadFileTool extends BaseTool {
-  name = 'read_file';
-  description = 'Read the contents of a file';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to read'),
-    max_size: z.number().optional().describe('Maximum file size to read in KB (default: 500)')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { file_path, max_size = 500 } = this.validateParams<{
-        file_path: string;
-        max_size?: number;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      
-      // Security check
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('File not found');
-      }
-
-      const stats = await fs.stat(fullPath);
-      if (stats.size > max_size * 1024) {
-        return this.createErrorResult(`File too large: ${Math.round(stats.size / 1024)}KB > ${max_size}KB`);
-      }
-
-      const content = await fs.readFile(fullPath, 'utf-8');
-      context.logger.debug(`Read file: ${file_path} (${stats.size} bytes)`);
-
-      return this.createSuccessResult({
-        content,
-        size: stats.size,
-        path: file_path
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to read file: ${error.message}`);
-    }
-  }
-}
-
-export class WriteFileTool extends BaseTool {
-  name = 'write_file';
-  description = 'Write content to a file';
-  parameters = z.object({
-    file_path: z.string().describe('Path to the file to write'),
-    content: z.string().describe('Content to write to the file'),
-    create_directories: z.boolean().default(true).describe('Create parent directories if they don\'t exist')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableFileOperations) {
-        return this.createErrorResult('File operations are disabled');
-      }
-
-      const { file_path, content, create_directories } = this.validateParams<{
-        file_path: string;
-        content: string;
-        create_directories: boolean;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, file_path);
-      
-      // Security check
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-
-      if (create_directories) {
-        await fs.ensureDir(path.dirname(fullPath));
-      }
-
-      await fs.writeFile(fullPath, content, 'utf-8');
-      context.logger.debug(`Wrote file: ${file_path} (${content.length} chars)`);
-
-      return this.createSuccessResult({
-        path: file_path,
-        size: content.length
-      }, `Successfully wrote ${file_path}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to write file: ${error.message}`);
-    }
-  }
-}
-
-export class ListDirectoryTool extends BaseTool {
-  name = 'list_directory';
-  description = 'List files and directories in a given path';
-  parameters = z.object({
-    directory_path: z.string().default('.').describe('Path to the directory to list'),
-    recursive: z.boolean().default(false).describe('List files recursively'),
-    max_depth: z.number().default(3).describe('Maximum depth for recursive listing')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { directory_path, recursive, max_depth } = this.validateParams<{
-        directory_path: string;
-        recursive: boolean;
-        max_depth: number;
-      }>(params);
-
-      const fullPath = path.resolve(context.repositoryPath, directory_path);
-      
-      // Security check
-      if (!fullPath.startsWith(context.repositoryPath)) {
-        return this.createErrorResult('Access denied: Path outside repository');
-      }
-
-      if (!(await fs.pathExists(fullPath))) {
-        return this.createErrorResult('Directory not found');
-      }
-
-      const stats = await fs.stat(fullPath);
-      if (!stats.isDirectory()) {
-        return this.createErrorResult('Path is not a directory');
-      }
-
-      const listFiles = async (currentPath: string, depth: number = 0): Promise<any[]> => {
-        if (depth > max_depth) return [];
-        
-        const entries = await fs.readdir(currentPath);
-        const files: any[] = [];
-
-        for (const entry of entries) {
-          // Skip hidden files and common ignore patterns
-          if (entry.startsWith('.') || entry === 'node_modules') continue;
-
-          const entryPath = path.join(currentPath, entry);
-          const entryStats = await fs.stat(entryPath);
-          const relativePath = path.relative(context.repositoryPath, entryPath);
-
-          const fileInfo: any = {
-            name: entry,
-            path: relativePath,
-            type: entryStats.isDirectory() ? 'directory' : 'file',
-            size: entryStats.size,
-            modified: entryStats.mtime
-          };
-
-          files.push(fileInfo);
-
-          if (recursive && entryStats.isDirectory() && depth < max_depth) {
-            const children = await listFiles(entryPath, depth + 1);
-            fileInfo.children = children;
-          }
-        }
-
-        return files.sort((a, b) => {
-          // Directories first, then files
-          if (a.type !== b.type) {
-            return a.type === 'directory' ? -1 : 1;
-          }
-          return a.name.localeCompare(b.name);
-        });
-      };
-
-      const files = await listFiles(fullPath);
-      context.logger.debug(`Listed directory: ${directory_path} (${files.length} entries)`);
-
-      return this.createSuccessResult({
-        path: directory_path,
-        entries: files
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to list directory: ${error.message}`);
-    }
-  }
-}
-
-export class SearchFilesTool extends BaseTool {
-  name = 'search_files';
-  description = 'Search for files matching a pattern';
-  parameters = z.object({
-    pattern: z.string().describe('Glob pattern to search for files'),
-    content_search: z.union([z.string(), z.boolean()]).optional().describe('Search for files containing this text'),
-    file_types: z.array(z.string()).optional().describe('Filter by file extensions (e.g., [".ts", ".js"])')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { pattern, content_search, file_types } = this.validateParams<{
-        pattern: string;
-        content_search?: string | boolean;
-        file_types?: string[];
-      }>(params);
-
-      const { glob } = await import('glob');
-      
-      const searchPath = path.join(context.repositoryPath, pattern);
-      let files = await glob(searchPath, {
-        ignore: ['node_modules/**', '.git/**', 'dist/**', 'build/**']
-      });
-
-      // Filter by file types
-      if (file_types && file_types.length > 0) {
-        files = files.filter(file => 
-          file_types.some(ext => file.endsWith(ext))
-        );
-      }
-
-      const results = [];
-      
-      for (const file of files.slice(0, 50)) { // Limit to 50 results
-        const relativePath = path.relative(context.repositoryPath, file);
-        const stats = await fs.stat(file);
-        
-        let matches = true;
-        let matchedLines: string[] = [];
-        
-        // Content search
-        const contentSearchStr = typeof content_search === 'string' ? content_search : undefined;
-        if (contentSearchStr && stats.isFile()) {
-          try {
-            const content = await fs.readFile(file, 'utf-8');
-            const lines = content.split('\n');
-            
-            matchedLines = lines
-              .map((line, index) => ({ line, index }))
-              .filter(({ line }) => line.toLowerCase().includes(contentSearchStr.toLowerCase()))
-              .slice(0, 5) // Limit to 5 matches per file
-              .map(({ line, index }) => `${index + 1}: ${line.trim()}`);
-              
-            matches = matchedLines.length > 0;
-          } catch {
-            matches = false;
-          }
-        }
-        
-        if (matches) {
-          results.push({
-            path: relativePath,
-            type: stats.isDirectory() ? 'directory' : 'file',
-            size: stats.size,
-            modified: stats.mtime,
-            matches: matchedLines
-          });
-        }
-      }
-
-      context.logger.debug(`Found ${results.length} files matching pattern: ${pattern}`);
-
-      return this.createSuccessResult({
-        pattern,
-        results,
-        total: results.length
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to search files: ${error.message}`);
-    }
-  }
-}
diff --git a/src/tools/git-tools.ts b/src/tools/git-tools.ts
deleted file mode 100644
index 9f23e27..0000000
--- a/src/tools/git-tools.ts
+++ /dev/null
@@ -1,208 +0,0 @@
-import { z } from 'zod';
-import simpleGit from 'simple-git';
-import { BaseTool } from './base-tool';
-import { ToolContext, ToolResult } from '../types';
-
-export class GitStatusTool extends BaseTool {
-  name = 'git_status';
-  description = 'Get the current git status of the repository';
-  parameters = z.object({});
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableGitOperations) {
-        return this.createErrorResult('Git operations are disabled');
-      }
-
-      const git = simpleGit(context.repositoryPath);
-      const status = await git.status();
-
-      context.logger.debug(`Git status: ${status.files.length} changes`);
-
-      return this.createSuccessResult({
-        branch: status.current,
-        ahead: status.ahead,
-        behind: status.behind,
-        staged: status.staged,
-        modified: status.modified,
-        deleted: status.deleted,
-        created: status.created,
-        untracked: status.not_added,
-        conflicted: status.conflicted,
-        clean: status.isClean()
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to get git status: ${error.message}`);
-    }
-  }
-}
-
-export class GitDiffTool extends BaseTool {
-  name = 'git_diff';
-  description = 'Get the diff for specific files or all changes';
-  parameters = z.object({
-    file_path: z.string().optional().describe('Specific file to get diff for'),
-    staged: z.boolean().default(false).describe('Show staged changes instead of working directory changes')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableGitOperations) {
-        return this.createErrorResult('Git operations are disabled');
-      }
-
-      const { file_path, staged } = this.validateParams<{
-        file_path?: string;
-        staged: boolean;
-      }>(params);
-
-      const git = simpleGit(context.repositoryPath);
-      
-      let diff: string;
-      if (staged) {
-        const args = ['--cached', file_path].filter(Boolean) as string[];
-        diff = await git.diff(args);
-      } else {
-        const args = [file_path].filter(Boolean) as string[];
-        diff = await git.diff(args);
-      }
-
-      context.logger.debug(`Git diff: ${staged ? 'staged' : 'working'} changes${file_path ? ` for ${file_path}` : ''}`);
-
-      return this.createSuccessResult({
-        diff,
-        staged,
-        file_path: file_path || 'all files'
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to get git diff: ${error.message}`);
-    }
-  }
-}
-
-export class GitLogTool extends BaseTool {
-  name = 'git_log';
-  description = 'Get commit history';
-  parameters = z.object({
-    max_count: z.number().default(10).describe('Maximum number of commits to retrieve'),
-    file_path: z.string().optional().describe('Get log for specific file')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableGitOperations) {
-        return this.createErrorResult('Git operations are disabled');
-      }
-
-      const { max_count, file_path } = this.validateParams<{
-        max_count: number;
-        file_path?: string;
-      }>(params);
-
-      const git = simpleGit(context.repositoryPath);
-      
-      const logOptions: any = { maxCount: max_count };
-      if (file_path) {
-        logOptions.file = file_path;
-      }
-
-      const log = await git.log(logOptions);
-
-      const commits = log.all.map(commit => ({
-        hash: commit.hash,
-        date: commit.date,
-        message: commit.message,
-        author: commit.author_name,
-        email: commit.author_email
-      }));
-
-      context.logger.debug(`Git log: ${commits.length} commits`);
-
-      return this.createSuccessResult({
-        commits,
-        total: commits.length
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to get git log: ${error.message}`);
-    }
-  }
-}
-
-export class GitAddTool extends BaseTool {
-  name = 'git_add';
-  description = 'Stage files for commit';
-  parameters = z.object({
-    file_paths: z.array(z.string()).describe('Files to stage for commit'),
-    all: z.boolean().default(false).describe('Stage all changes')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableGitOperations) {
-        return this.createErrorResult('Git operations are disabled');
-      }
-
-      const { file_paths, all } = this.validateParams<{
-        file_paths: string[];
-        all: boolean;
-      }>(params);
-
-      const git = simpleGit(context.repositoryPath);
-
-      if (all) {
-        await git.add('.');
-        context.logger.debug('Staged all changes');
-      } else {
-        await git.add(file_paths);
-        context.logger.debug(`Staged files: ${file_paths.join(', ')}`);
-      }
-
-      return this.createSuccessResult({
-        staged: all ? 'all files' : file_paths,
-        message: `Successfully staged ${all ? 'all changes' : file_paths.length + ' files'}`
-      });
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to stage files: ${error.message}`);
-    }
-  }
-}
-
-export class GitCommitTool extends BaseTool {
-  name = 'git_commit';
-  description = 'Commit staged changes';
-  parameters = z.object({
-    message: z.string().describe('Commit message'),
-    add_all: z.boolean().default(false).describe('Add all changes before committing')
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      if (!context.config.tools.enableGitOperations) {
-        return this.createErrorResult('Git operations are disabled');
-      }
-
-      const { message, add_all } = this.validateParams<{
-        message: string;
-        add_all: boolean;
-      }>(params);
-
-      const git = simpleGit(context.repositoryPath);
-
-      if (add_all) {
-        await git.add('.');
-      }
-
-      const result = await git.commit(message);
-
-      context.logger.debug(`Created commit: ${result.commit}`);
-
-      return this.createSuccessResult({
-        commit: result.commit,
-        summary: result.summary,
-        message
-      }, `Successfully created commit: ${result.commit}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to commit: ${error.message}`);
-    }
-  }
-}
diff --git a/src/tools/index.ts b/src/tools/index.ts
deleted file mode 100644
index e87d1f2..0000000
--- a/src/tools/index.ts
+++ /dev/null
@@ -1,114 +0,0 @@
-import { Tool } from '../types';
-import { 
-  ReadFileTool, 
-  WriteFileTool, 
-  ListDirectoryTool, 
-  SearchFilesTool 
-} from './file-tools';
-import { 
-  GitStatusTool, 
-  GitDiffTool, 
-  GitLogTool, 
-  GitAddTool, 
-  GitCommitTool 
-} from './git-tools';
-import { 
-  AnalyzeCodeTool, 
-  RefactorCodeTool 
-} from './code-tools';
-import { ApplyTextEditsTool, InsertTextTool } from './edit-tools';
-import { TodoCreateTool, TodoUpdateTool, TodoCompleteTool, TodoListTool } from './todo-tools';
-
-export class ToolRegistry {
-  private tools: Map<string, Tool> = new Map();
-
-  constructor() {
-    this.registerDefaultTools();
-  }
-
-  private registerDefaultTools(): void {
-    // File tools
-    this.register(new ReadFileTool());
-    this.register(new WriteFileTool());
-    this.register(new ListDirectoryTool());
-    this.register(new SearchFilesTool());
-
-    // Git tools
-    this.register(new GitStatusTool());
-    this.register(new GitDiffTool());
-    this.register(new GitLogTool());
-    this.register(new GitAddTool());
-    this.register(new GitCommitTool());
-
-    // Code analysis tools
-    this.register(new AnalyzeCodeTool());
-    this.register(new RefactorCodeTool());
-
-    // Editing tools
-    this.register(new ApplyTextEditsTool());
-    this.register(new InsertTextTool());
-
-    // TODO tools
-    this.register(new TodoCreateTool());
-    this.register(new TodoUpdateTool());
-    this.register(new TodoCompleteTool());
-    this.register(new TodoListTool());
-  }
-
-  register(tool: Tool): void {
-    this.tools.set(tool.name, tool);
-  }
-
-  unregister(toolName: string): void {
-    this.tools.delete(toolName);
-  }
-
-  getTool(name: string): Tool | undefined {
-    return this.tools.get(name);
-  }
-
-  getAllTools(): Tool[] {
-    return Array.from(this.tools.values());
-  }
-
-  getToolsByCategory(category: 'file' | 'git' | 'code' | 'analysis'): Tool[] {
-    const categoryMap = {
-      file: ['read_file', 'write_file', 'list_directory', 'search_files'],
-      git: ['git_status', 'git_diff', 'git_log', 'git_add', 'git_commit'],
-      code: ['analyze_code', 'refactor_code'],
-      analysis: ['analyze_code']
-    };
-
-    const toolNames = categoryMap[category] || [];
-    return toolNames.map(name => this.tools.get(name)).filter(Boolean) as Tool[];
-  }
-
-  getToolSpecs(): any[] {
-    return this.getAllTools().map(tool => {
-      // Convert tool to OpenAI function calling format
-      if ('toOpenAIToolSpec' in tool && typeof tool.toOpenAIToolSpec === 'function') {
-        return (tool as any).toOpenAIToolSpec();
-      }
-
-      // Fallback format
-      return {
-        type: 'function',
-        function: {
-          name: tool.name,
-          description: tool.description,
-          parameters: {
-            type: 'object',
-            properties: {},
-            required: []
-          }
-        }
-      };
-    });
-  }
-}
-
-// Export all tools for individual use
-export * from './base-tool';
-export * from './file-tools';
-export * from './git-tools';
-export * from './code-tools';
diff --git a/src/tools/todo-tools.ts b/src/tools/todo-tools.ts
deleted file mode 100644
index faf650c..0000000
--- a/src/tools/todo-tools.ts
+++ /dev/null
@@ -1,84 +0,0 @@
-import { z } from 'zod';
-import { BaseTool } from './base-tool';
-import { ToolContext, ToolResult } from '../types';
-import { TodoManager } from '../core/todo-manager';
-
-export class TodoCreateTool extends BaseTool {
-  name = 'todo_create';
-  description = 'Create a TODO item with title and optional description and status.';
-  parameters = z.object({
-    title: z.string(),
-    description: z.string().optional(),
-    status: z.enum(['pending', 'in_progress', 'completed', 'cancelled']).optional()
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { title, description, status } = this.validateParams<{ title: string; description?: string; status?: any }>(params);
-      const tm = new TodoManager(context.repositoryPath);
-      const item = await tm.create(title, description, status);
-      return this.createSuccessResult({ item }, `Created TODO: ${item.title}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to create TODO: ${error.message}`);
-    }
-  }
-}
-
-export class TodoUpdateTool extends BaseTool {
-  name = 'todo_update';
-  description = 'Update a TODO item by id with fields like title, description, or status.';
-  parameters = z.object({
-    id: z.string(),
-    title: z.string().optional(),
-    description: z.string().optional(),
-    status: z.enum(['pending', 'in_progress', 'completed', 'cancelled']).optional()
-  });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { id, ...patch } = this.validateParams<any>(params);
-      const tm = new TodoManager(context.repositoryPath);
-      const item = await tm.update(id, patch);
-      if (!item) return this.createErrorResult('TODO not found');
-      return this.createSuccessResult({ item }, `Updated TODO: ${item.title}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to update TODO: ${error.message}`);
-    }
-  }
-}
-
-export class TodoCompleteTool extends BaseTool {
-  name = 'todo_complete';
-  description = 'Mark a TODO item as completed by id.';
-  parameters = z.object({ id: z.string() });
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const { id } = this.validateParams<{ id: string }>(params);
-      const tm = new TodoManager(context.repositoryPath);
-      const item = await tm.complete(id);
-      if (!item) return this.createErrorResult('TODO not found');
-      return this.createSuccessResult({ item }, `Completed TODO: ${item.title}`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to complete TODO: ${error.message}`);
-    }
-  }
-}
-
-export class TodoListTool extends BaseTool {
-  name = 'todo_list';
-  description = 'List all TODO items.';
-  parameters = z.object({});
-
-  async execute(params: any, context: ToolContext): Promise<ToolResult> {
-    try {
-      const tm = new TodoManager(context.repositoryPath);
-      const items = await tm.list();
-      return this.createSuccessResult({ items }, `Found ${items.length} TODOs`);
-    } catch (error: any) {
-      return this.createErrorResult(`Failed to list TODOs: ${error.message}`);
-    }
-  }
-}
-
-
diff --git a/src/types/index.ts b/src/types/index.ts
index 171d961..1c9c2b2 100644
--- a/src/types/index.ts
+++ b/src/types/index.ts
@@ -1,173 +1,104 @@
-import { z } from 'zod';
+/**
+ * Core type definitions for the multi-agent coding system
+ */
 
-// Configuration schemas
-export const ConfigSchema = z.object({
-  openRouter: z.object({
-    apiKey: z.string(),
-    model: z.string().default('google/gemini-2.0-flash-experimental'),
-    baseUrl: z.string().default('https://openrouter.ai/api/v1')
-  }),
-  agent: z.object({
-    maxConcurrentAgents: z.number().default(3),
-    maxContextLength: z.number().default(100000),
-    temperature: z.number().default(0.1)
-  }),
-  tools: z.object({
-    maxFileSizeKB: z.number().default(500),
-    enableGitOperations: z.boolean().default(true),
-    enableFileOperations: z.boolean().default(true)
-  }),
-  logging: z.object({
-    level: z.enum(['debug', 'info', 'warn', 'error']).default('info'),
-    logToFile: z.boolean().default(false)
-  })
-});
-
-export type Config = z.infer<typeof ConfigSchema>;
-
-// Core interfaces
-export interface Agent {
-  id: string;
-  name: string;
-  description: string;
-  capabilities: string[];
-  execute(context: AgentContext): Promise<AgentResult>;
-}
-
-export interface Tool {
-  name: string;
-  description: string;
-  parameters: z.ZodSchema;
-  execute(params: any, context: ToolContext): Promise<ToolResult>;
-}
-
-export interface AgentContext {
-  request: string;
-  repositoryPath: string;
-  availableTools: Tool[];
-  conversation: ConversationMessage[];
-  config: Config;
+export interface ExecutionResult {
+  output: string;
+  exitCode: number;
 }
 
-export interface ToolContext {
-  repositoryPath: string;
-  config: Config;
-  logger: Logger;
-}
-
-export interface AgentResult {
-  success: boolean;
-  message: string;
-  data?: any;
-  toolsUsed?: string[];
-  nextActions?: string[];
-}
-
-export interface ToolResult {
-  success: boolean;
-  data: any;
-  message?: string;
-  error?: string;
+export interface LLMMessage {
+  role: 'system' | 'user' | 'assistant';
+  content: string;
 }
 
-export interface ConversationMessage {
-  role: 'user' | 'assistant' | 'system';
+export interface LLMResponse {
   content: string;
-  timestamp: Date;
-  metadata?: Record<string, any>;
+  usage?: {
+    inputTokens: number;
+    outputTokens: number;
+  };
 }
 
-export interface Logger {
-  debug(message: string, ...args: any[]): void;
-  info(message: string, ...args: any[]): void;
-  warn(message: string, ...args: any[]): void;
-  error(message: string, ...args: any[]): void;
+export interface AgentConfig {
+  model?: string;
+  temperature?: number;
+  apiKey?: string;
+  apiBase?: string;
+  maxTokens?: number;
 }
 
-// Repository analysis types
-export interface FileInfo {
-  path: string;
-  type: 'file' | 'directory';
-  size: number;
-  lastModified: Date;
-  language?: string;
-  importance: number;
+export enum TaskStatus {
+  CREATED = 'created',
+  COMPLETED = 'completed',
+  FAILED = 'failed',
 }
 
-export interface RepositoryContext {
-  rootPath: string;
-  files: FileInfo[];
-  structure: DirectoryTree;
-  gitInfo?: GitInfo;
-  dependencies: PackageInfo[];
-  technologies: string[];
+export enum AgentType {
+  EXPLORER = 'explorer',
+  CODER = 'coder',
 }
 
-export interface DirectoryTree {
-  name: string;
-  type: 'file' | 'directory';
+export interface ContextBootstrapItem {
   path: string;
-  children?: DirectoryTree[];
+  reason: string;
 }
 
-export interface GitInfo {
-  branch: string;
-  hasUncommittedChanges: boolean;
-  remoteUrl?: string;
-  lastCommit: {
-    hash: string;
-    message: string;
-    author: string;
-    date: Date;
-  };
+export interface ContextItem {
+  id: string;
+  content: string;
 }
 
-export interface PackageInfo {
-  type: 'npm' | 'pip' | 'cargo' | 'go' | 'maven' | 'other';
-  file: string;
-  dependencies: Record<string, string>;
-  devDependencies?: Record<string, string>;
+export interface SubagentMeta {
+  trajectory?: LLMMessage[];
+  numTurns?: number;
+  totalInputTokens: number;
+  totalOutputTokens: number;
 }
 
-// LLM types
-export interface LLMMessage {
-  role: 'user' | 'assistant' | 'system';
-  content: string;
+export interface SubagentReport {
+  contexts: ContextItem[];
+  comments: string;
+  meta?: SubagentMeta;
 }
 
-export interface LLMResponse {
+export interface Context {
+  id: string;
   content: string;
-  usage?: {
-    promptTokens: number;
-    completionTokens: number;
-    totalTokens: number;
-  };
+  reportedBy: string;
+  taskId?: string;
+  createdAt: string;
 }
 
-export interface ToolCall {
-  name: string;
-  parameters: Record<string, any>;
+export interface Task {
+  taskId: string;
+  agentType: AgentType;
+  title: string;
+  description: string;
+  contextRefs: string[];
+  contextBootstrap: ContextBootstrapItem[];
+  status: TaskStatus;
+  createdAt: string;
+  completedAt?: string;
+  result?: Record<string, any>;
 }
 
-export interface StructuredOutput<T = any> {
-  fieldNames: string[];
-  dataTypes: Record<string, string>;
-  data: T;
-  prettyPrint?: boolean;
+export interface Turn {
+  llmOutput: string;
+  actionsExecuted: any[];
+  envResponses: string[];
+  subagentTrajectories?: Record<string, Record<string, any>>;
 }
 
-// TODO types
-export type TodoStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';
-
-export interface TodoItem {
-  id: string;
-  title: string;
-  description?: string;
-  status: TodoStatus;
-  createdAt: string; // ISO string for portability
-  updatedAt: string; // ISO string
+export interface ConversationHistory {
+  turns: Turn[];
+  maxTurns: number;
 }
 
-export interface TodoListResponse {
-  items: TodoItem[];
+export interface OrchestratorState {
+  done: boolean;
+  finishMessage?: string;
+  tasks: Record<string, Task>;
+  contextStore: Record<string, Context>;
+  conversationHistory: ConversationHistory;
 }
diff --git a/src/utils/index.ts b/src/utils/index.ts
deleted file mode 100644
index 94a83fd..0000000
--- a/src/utils/index.ts
+++ /dev/null
@@ -1,202 +0,0 @@
-import * as fs from 'fs-extra';
-import * as path from 'path';
-
-/**
- * Utility functions for DevRev Coder Agent
- */
-
-export function sanitizePath(inputPath: string, basePath: string): string {
-  const resolved = path.resolve(basePath, inputPath);
-  if (!resolved.startsWith(basePath)) {
-    throw new Error(`Path ${inputPath} is outside the allowed directory`);
-  }
-  return resolved;
-}
-
-export function formatBytes(bytes: number): string {
-  if (bytes === 0) return '0 B';
-  
-  const k = 1024;
-  const sizes = ['B', 'KB', 'MB', 'GB'];
-  const i = Math.floor(Math.log(bytes) / Math.log(k));
-  
-  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
-}
-
-export function truncateText(text: string, maxLength: number): string {
-  if (text.length <= maxLength) return text;
-  return text.slice(0, maxLength - 3) + '...';
-}
-
-export function getFileExtension(filePath: string): string {
-  return path.extname(filePath).toLowerCase();
-}
-
-export function isTextFile(filePath: string): boolean {
-  const textExtensions = [
-    '.txt', '.md', '.json', '.yaml', '.yml', '.xml', '.csv',
-    '.js', '.ts', '.jsx', '.tsx', '.py', '.java', '.cpp', '.c',
-    '.h', '.cs', '.php', '.rb', '.go', '.rs', '.swift', '.kt',
-    '.scala', '.html', '.css', '.scss', '.less', '.sql', '.sh',
-    '.bash', '.zsh', '.ps1', '.dockerfile', '.gitignore',
-    '.env', '.config', '.ini', '.toml', '.lock'
-  ];
-  
-  const extension = getFileExtension(filePath);
-  return textExtensions.includes(extension);
-}
-
-export function isBinaryFile(filePath: string): boolean {
-  const binaryExtensions = [
-    '.exe', '.bin', '.dll', '.so', '.dylib', '.app',
-    '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.ico',
-    '.mp3', '.mp4', '.avi', '.mov', '.wmv', '.flv',
-    '.pdf', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx',
-    '.zip', '.tar', '.gz', '.rar', '.7z',
-    '.woff', '.woff2', '.ttf', '.otf', '.eot'
-  ];
-  
-  const extension = getFileExtension(filePath);
-  return binaryExtensions.includes(extension);
-}
-
-export async function isGitRepository(directoryPath: string): Promise<boolean> {
-  try {
-    const gitPath = path.join(directoryPath, '.git');
-    const stats = await fs.stat(gitPath);
-    return stats.isDirectory();
-  } catch {
-    return false;
-  }
-}
-
-export function parseGitUrl(url: string): { owner: string; repo: string } | null {
-  // Handle GitHub URLs
-  const githubMatch = url.match(/github\.com[\/:]([^\/]+)\/([^\/\.]+)/);
-  if (githubMatch) {
-    return { owner: githubMatch[1], repo: githubMatch[2] };
-  }
-  
-  return null;
-}
-
-export function formatTimestamp(date: Date): string {
-  return date.toISOString().replace('T', ' ').replace(/\..+/, '');
-}
-
-export function calculateComplexityScore(content: string): number {
-  let score = 0;
-  
-  // Basic metrics
-  const lines = content.split('\n').length;
-  score += Math.min(lines / 100, 5); // Max 5 points for line count
-  
-  // Complexity indicators
-  const complexityPatterns = [
-    /if\s*\(/g,
-    /else\s*\{/g,
-    /for\s*\(/g,
-    /while\s*\(/g,
-    /switch\s*\(/g,
-    /catch\s*\(/g,
-    /function\s+/g,
-    /class\s+/g,
-    /interface\s+/g,
-    /async\s+/g
-  ];
-  
-  complexityPatterns.forEach(pattern => {
-    const matches = content.match(pattern);
-    if (matches) {
-      score += matches.length * 0.5;
-    }
-  });
-  
-  return Math.min(score, 10); // Cap at 10
-}
-
-export function extractImportStatements(content: string, language: 'typescript' | 'javascript' | 'python'): string[] {
-  const imports: string[] = [];
-  const lines = content.split('\n');
-  
-  switch (language) {
-    case 'typescript':
-    case 'javascript':
-      lines.forEach(line => {
-        const trimmed = line.trim();
-        if (trimmed.startsWith('import ') || trimmed.startsWith('const ') && trimmed.includes('require(')) {
-          imports.push(trimmed);
-        }
-      });
-      break;
-      
-    case 'python':
-      lines.forEach(line => {
-        const trimmed = line.trim();
-        if (trimmed.startsWith('import ') || trimmed.startsWith('from ')) {
-          imports.push(trimmed);
-        }
-      });
-      break;
-  }
-  
-  return imports;
-}
-
-export function generateHash(content: string): string {
-  // Simple hash function for content identification
-  let hash = 0;
-  for (let i = 0; i < content.length; i++) {
-    const char = content.charCodeAt(i);
-    hash = ((hash << 5) - hash) + char;
-    hash = hash & hash; // Convert to 32-bit integer
-  }
-  return Math.abs(hash).toString(36);
-}
-
-export class RateLimiter {
-  private requests: number[] = [];
-  private limit: number;
-  private windowMs: number;
-
-  constructor(limit: number, windowMs: number) {
-    this.limit = limit;
-    this.windowMs = windowMs;
-  }
-
-  async isAllowed(): Promise<boolean> {
-    const now = Date.now();
-    
-    // Remove old requests outside the window
-    this.requests = this.requests.filter(time => now - time < this.windowMs);
-    
-    if (this.requests.length < this.limit) {
-      this.requests.push(now);
-      return true;
-    }
-    
-    return false;
-  }
-
-  async waitForSlot(): Promise<void> {
-    while (!(await this.isAllowed())) {
-      await new Promise(resolve => setTimeout(resolve, 100));
-    }
-  }
-}
-
-export function validateEnvironmentVariables(): { isValid: boolean; missing: string[] } {
-  const required = ['OPENROUTER_API_KEY'];
-  const missing: string[] = [];
-  
-  required.forEach(envVar => {
-    if (!process.env[envVar]) {
-      missing.push(envVar);
-    }
-  });
-  
-  return {
-    isValid: missing.length === 0,
-    missing
-  };
-}
diff --git a/tsconfig.json b/tsconfig.json
index db82647..657ef2b 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -9,20 +9,19 @@
     "esModuleInterop": true,
     "skipLibCheck": true,
     "forceConsistentCasingInFileNames": true,
+    "declaration": true,
+    "declarationMap": true,
+    "sourceMap": true,
     "resolveJsonModule": true,
-    "moduleResolution": "node",
-    "allowSyntheticDefaultImports": true,
     "experimentalDecorators": true,
     "emitDecoratorMetadata": true,
-    "declaration": true,
-    "sourceMap": true
+    "strictPropertyInitialization": false,
+    "noImplicitAny": true,
+    "noImplicitReturns": true,
+    "noImplicitThis": true,
+    "noUnusedLocals": false,
+    "noUnusedParameters": false
   },
-  "include": [
-    "src/**/*"
-  ],
-  "exclude": [
-    "node_modules",
-    "dist",
-    "**/*.test.ts"
-  ]
+  "include": ["src/**/*"],
+  "exclude": ["node_modules", "dist", "**/*.test.ts"]
 }
